#Область МетодыСобытияПриложения

Процедура ПриНачалеРаботыСистемы() Экспорт
	ПараметрыСтартаСеанса=УИ_ОбщегоНазначенияВызовСервера.ПараметрыСтартаСеанса();

	Если ПараметрыСтартаСеанса.ДобавленыПраваНаРасширение Тогда
		ЗавершитьРаботуСистемы(Ложь, Истина);
	КонецЕсли;

	УИ_ПараметрыПриложения.Вставить("НомерСеанса", ПараметрыСтартаСеанса.НомерСеанса);
	УИ_ПараметрыПриложения.Вставить("ЯзыкСинтаксисаКонфигурации", ПараметрыСтартаСеанса.ЯзыкСинтаксисаКонфигурации);

	УИ_ПараметрыПриложения.Вставить("ЭтоLinuxКлиент", УИ_ОбщегоНазначенияКлиентСервер.ЭтоLinux());
	УИ_ПараметрыПриложения.Вставить("ЭтоWindowsКлиент", УИ_ОбщегоНазначенияКлиентСервер.ЭтоWindows());
	УИ_ПараметрыПриложения.Вставить("ЭтоВебКлиент", ЭтоВебКлиент());
	УИ_ПараметрыПриложения.Вставить("ЭтоПортативнаяПоставка", УИ_ОбщегоНазначенияКлиентСервер.ЭтоПортативнаяПоставка());
	УИ_ПараметрыПриложения.Вставить("ПолеHTMLПостроеноНаWebkit",
		УИ_ОбщегоНазначенияКлиентСервер.ПолеHTMLПостроеноНаWebkit());
	УИ_ПараметрыПриложения.Вставить("ВерсияПлатформы",
		УИ_ОбщегоНазначенияКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие());
	//УИ_ПараметрыПриложения.Вставить("АдресОписанияМетаданныхКонфигурации", УИ_ОбщегоНазначенияВызовСервера.АдресОписанияМетаданныхКонфигурации());
	
	ПараметрыСеансаВХранилище = Новый Структура;
	ПараметрыСеансаВХранилище.Вставить("ЭтоLinuxКлиент", УИ_ПараметрыПриложения["ЭтоLinuxКлиент"]);
	ПараметрыСеансаВХранилище.Вставить("ЭтоВебКлиент", УИ_ПараметрыПриложения["ЭтоВебКлиент"]);
	ПараметрыСеансаВХранилище.Вставить("ЭтоWindowsКлиент", УИ_ПараметрыПриложения["ЭтоWindowsКлиент"]);
	ПараметрыСеансаВХранилище.Вставить("ЭтоПортативнаяПоставка", УИ_ПараметрыПриложения["ЭтоПортативнаяПоставка"]);
	ПараметрыСеансаВХранилище.Вставить("ПолеHTMLПостроеноНаWebkit", УИ_ПараметрыПриложения["ПолеHTMLПостроеноНаWebkit"]);
	ПараметрыСеансаВХранилище.Вставить("ВерсияПлатформы", УИ_ПараметрыПриложения["ВерсияПлатформы"]);
	//ПараметрыСеансаВХранилище.Вставить("АдресОписанияМетаданныхКонфигурации", УИ_ПараметрыПриложения["АдресОписанияМетаданныхКонфигурации"]);

	УИ_ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(
		УИ_ОбщегоНазначенияКлиентСервер.КлючОбъектаВХранилищеНастроек(),
		УИ_ОбщегоНазначенияКлиентСервер.КлючНастроекПараметровСеанса(), ПараметрыСеансаВХранилище);

КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы() Экспорт
	КаталогВспомогательныхБиблиотекИнструментов=КаталогВспомогательныхБиблиотекИнструментов();
	Если Не ЗначениеЗаполнено(КаталогВспомогательныхБиблиотекИнструментов) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		НачатьУдалениеФайлов(,КаталогВспомогательныхБиблиотекИнструментов);
	Исключение

	КонецПопытки;
КонецПроцедуры

#КонецОбласти

// Выводит текст, который пользователь может скопировать.
//
// Параметры:
//   Обработчик - ОписаниеОповещения - Описание процедуры, которая будет вызвана после завершения показа.
//       Возвращаемое значение аналогично ПоказатьВопросПользователю().
//   Текст     - Строка - Текст информации.
//   Заголовок - Строка - Необязательный. Заголовок окна. По умолчанию "Подробнее".
//
Процедура ПоказатьПодробнуюИнформацию(Обработчик, Текст, Заголовок = Неопределено) Экспорт
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	НастройкиДиалога.Вставить("Картинка", Неопределено);
	НастройкиДиалога.Вставить("ПоказыватьКартинку", Ложь);
	НастройкиДиалога.Вставить("МожноКопировать", Истина);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию", 0);
	НастройкиДиалога.Вставить("ВыделятьКнопкуПоУмолчанию", Ложь);
	НастройкиДиалога.Вставить("Заголовок", Заголовок);

	Если Не ЗначениеЗаполнено(НастройкиДиалога.Заголовок) Тогда
		НастройкиДиалога.Заголовок = НСтр("ru = 'Подробнее'");
	КонецЕсли;

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, НСтр("ru = 'Закрыть'"));

	ПоказатьВопросПользователю(Обработчик, Текст, Кнопки, НастройкиДиалога);
КонецПроцедуры

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна
//                                                        вопроса со следующими параметрами:
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение
//                                                                       системного перечисления или значение,
//                                                                       связанное с нажатой кнопкой. В случае закрытия
//                                                                       диалога по истечении времени - значение
//                                                                       Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора
//                                                                                                  пользователя в
//                                                                                                  одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором:
//                                       Значение - содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может
//                                                  использоваться значение
//                                                  перечисления КодВозвратаДиалога, а также другие значения,
//                                                  поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - см. СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
Процедура ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки,
	ДополнительныеПараметры = Неопределено) Экспорт

	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе
		Параметры = Новый Структура;
	КонецЕсли;

	УИ_ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыВопросаПользователю(), Ложь);

	КнопкиПараметр = Кнопки;

	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
	//@skip-warning
		Параметры.КнопкаПоУмолчанию = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	КонецЕсли;

	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	КонецЕсли;

	Параметры.Вставить("Кнопки", КнопкиПараметр);
	Параметры.Вставить("ТекстСообщения", ТекстВопроса);

	ОповещениеДляЗапуска=ОписаниеОповещенияОЗавершении;
	Если ОповещениеДляЗапуска = Неопределено Тогда
		ОповещениеДляЗапуска=ПустоеОписаниеОповещенияДляЗапускаПриложения();
	КонецЕсли;

	ПоказатьВопрос(ОповещениеДляЗапуска, ТекстВопроса, КнопкиПараметр, , Параметры.КнопкаПоУмолчанию, "",
		Параметры.КнопкаТаймаута);

КонецПроцедуры

// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//  Структура   - структура со свойствами:
//    * КнопкаПоУмолчанию             - Произвольный - определяет кнопку по умолчанию по типу кнопки или по связанному
//                                                     с ней значению.
//    * Таймаут                       - Число        - интервал времени в секундах до автоматического закрытия окна
//                                                     вопроса.
//    * КнопкаТаймаута                - Произвольный - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                     на которой отображается количество секунд, оставшихся до
//                                                     истечения таймаута.
//    * Заголовок                     - Строка       - заголовок вопроса. 
//    * ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево - если Истина, то в окне вопроса будет доступен одноименный флажок.
//    * БольшеНеЗадаватьЭтотВопрос    - Булево       - принимает значение, выбранное пользователем в соответствующем
//                                                     флажке.
//    * БлокироватьВесьИнтерфейс      - Булево       - если Истина, форма вопроса открывается, блокируя работу всех
//                                                     остальных открытых окон, включая главное окно.
//    * Картинка                      - Картинка     - картинка, выводимая в окне вопроса.
//
Функция ПараметрыВопросаПользователю() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	Параметры.Вставить("Заголовок", КлиентскоеПриложение.ПолучитьЗаголовок());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Ложь);
	Параметры.Вставить("Картинка", БиблиотекаКартинок.УИ_Вопрос32);
	Возврат Параметры;

КонецФункции

// Возвращает строковое представление значения типа КодВозвратаДиалога.
Функция КодВозвратаДиалогаВСтроку(Значение)

	Результат = "КодВозвратаДиалога." + Строка(Значение);

	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;

	Возврат Результат;

КонецФункции

#Область Алгоритмы

Функция ВыполнитьАлгоритм(АлгоритмСсылка, ВходящиеПараметры = Неопределено, ОшибкаВыполнения = Ложь,
	СообщениеОбОшибке = "") Экспорт
	Возврат УИ_АлгоритмыКлиентСервер.ВыполнитьАлгоритм(АлгоритмСсылка, ВходящиеПараметры, ОшибкаВыполнения,
		СообщениеОбОшибке)
КонецФункции

#КонецОбласти

#Область Отладка

Процедура ОткрытьКонсольОтладки(ТипОбъектаОтладки, ДанныеДляОтладки, УникальностьФормыКонсоли = Неопределено) Экспорт
	Если ВРег(ТипОбъектаОтладки) = "ЗАПРОС" Тогда
		ИмяФормыКонсоли = "Обработка.УИ_КонсольЗапросов.Форма";
	ИначеЕсли ВРег(ТипОбъектаОтладки) = "СХЕМАКОМПОНОВКИДАННЫХ" Тогда
		ИмяФормыКонсоли = "Отчет.УИ_КонсольОтчетов.Форма";
	ИначеЕсли ВРег(ТипОбъектаОтладки) = "ОБЪЕКТБАЗЫДАННЫХ" Тогда
		ИмяФормыКонсоли = "Обработка.УИ_РедакторРеквизитовОбъекта.Форма";
	ИначеЕсли ВРег(ТипОбъектаОтладки) = "HTTPЗАПРОС" Тогда
		ИмяФормыКонсоли = "Обработка.УИ_КонсольHTTPЗапросов.Форма";
	Иначе
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеОтладки", ДанныеДляОтладки);

	Если УникальностьФормыКонсоли = Неопределено Тогда
		Уникальность = Новый УникальныйИдентификатор;
	Иначе
		Уникальность = УникальностьФормыКонсоли;
	КонецЕсли;

	ОткрытьФорму(ИмяФормыКонсоли, ПараметрыФормы, , Уникальность);

КонецПроцедуры

Процедура ЗапуститьКонсольОтладкиПоКлючуНастройкиДанныхОтладки(КлючНастройкиОтладки, Пользователь = Неопределено,
	ИдентификаторФормы = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(КлючНастройкиОтладки) Тогда
		Возврат;
	КонецЕсли;

	ДанныеОтладки = УИ_ОбщегоНазначенияВызовСервера.СтруктураДанныхОбъектаОтладкиИзСистемногоХранилищаНастроек(
		КлючНастройкиОтладки, Пользователь, ИдентификаторФормы);

	Если ДанныеОтладки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьКонсольОтладки(ДанныеОтладки.ТипОбъектаОтладки, ДанныеОтладки.АдресОбъектаОтладки);
КонецПроцедуры

#КонецОбласти

Функция ЭтоВебКлиент() Экспорт
	#Если ВебКлиент Тогда
		Возврат Истина;
	#Иначе 
		Возврат Ложь;
	#КонецЕсли
КонецФункции

Функция ПустоеОписаниеОповещенияДляЗапускаПриложения() Экспорт
	Возврат Новый ОписаниеОповещения("НачатьЗапускПриложенияЗавершениеПустое", ЭтотОбъект);
КонецФункции

Процедура НачатьЗапускПриложенияЗавершениеПустое(КодВозврата, ДополнительныеПараметры) Экспорт
	Если КодВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФормуРедактированияТекста(Текст, ОписаниеОповещенияОЗакрытии, Заголовок = "",
	РежимОткрытия = Неопределено) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Текст", Текст);
	ПараметрыФормы.Вставить("Заголовок", Заголовок);

	Если РежимОткрытия = Неопределено Тогда
		ОткрытьФорму("ОбщаяФорма.УИ_ФормаРедактированияТекста", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии);
	Иначе
		ОткрытьФорму("ОбщаяФорма.УИ_ФормаРедактированияТекста", ПараметрыФормы, , , , , ОписаниеОповещенияОЗакрытии,
			РежимОткрытия);
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФормуВыбораЭлементовСпискаЗначений(Список, ОписаниеОповещенияОЗакрытии, Заголовок = "",
	ТипЭлементов = Неопределено, ВидимостьПометки = Истина, ВидимостьПредставления = Истина, РежимПодбора = Истина,
	ВозвращатьТолькоВыбранныеЗначения = Истина, РежимОткрытия = Неопределено, ДоступныеЗначения = Неопределено) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Список", Список);
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	ПараметрыФормы.Вставить("ВозвращатьТолькоВыбранныеЗначения", ВозвращатьТолькоВыбранныеЗначения);
	ПараметрыФормы.Вставить("ВидимостьПометки", ВидимостьПометки);
	ПараметрыФормы.Вставить("ВидимостьПредставления", ВидимостьПредставления);
	ПараметрыФормы.Вставить("РежимПодбора", РежимПодбора);
	Если ТипЭлементов <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипЭлементов", ТипЭлементов);
	КонецЕсли;
	Если ДоступныеЗначения <> Неопределено Тогда
		ПараметрыФормы.Вставить("ДоступныеЗначения", ДоступныеЗначения);
	КонецЕсли;

	Если РежимОткрытия = Неопределено Тогда
		ОткрытьФорму("ОбщаяФорма.УИ_ФормаРедактированияСпискаЗначений", ПараметрыФормы, , , , ,
			ОписаниеОповещенияОЗакрытии);
	Иначе
		ОткрытьФорму("ОбщаяФорма.УИ_ФормаРедактированияСпискаЗначений", ПараметрыФормы, , , , ,
			ОписаниеОповещенияОЗакрытии, РежимОткрытия);
	КонецЕсли;
КонецПроцедуры

Процедура РедактироватьОбъект(СсылкаНаОбъект) Экспорт
	МассивТиповДоступныхДляРедактирования=УИ_ОбщегоНазначенияКлиентПовтИсп.ТипыОбъектовДоступныйДляРедактораОбъектовБазыДанных();
	Если МассивТиповДоступныхДляРедактирования.Найти(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("мОбъектСсылка", СсылкаНаОбъект);

	ОткрытьФорму("Обработка.УИ_РедакторРеквизитовОбъекта.Форма", ПараметрыФормы);
КонецПроцедуры

Процедура РедактироватьJSON(СтрокаJSON, РежимПросмотра, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("СтрокаJSON", СтрокаJSON);
	СтруктураПараметров.Вставить("РежимПросмотра", РежимПросмотра);

	Если ОписаниеОповещенияОЗавершении = Неопределено Тогда
		ОткрытьФорму("Обработка.УИ_РедакторJSON.Форма", СтруктураПараметров);
	Иначе
		ОткрытьФорму("Обработка.УИ_РедакторJSON.Форма", СтруктураПараметров, , , , , ОписаниеОповещенияОЗавершении);
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьДинамическийСписок(ИмяОбъектаМетаданных, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	СтрукПараметры = Новый Структура("ИмяОбъектаМетаданных", ИмяОбъектаМетаданных);

	Если ОписаниеОповещенияОЗавершении = Неопределено Тогда
		ОткрытьФорму("Обработка.УИ_ДинамическийСписок.Форма", СтрукПараметры, , ИмяОбъектаМетаданных);
	Иначе
		ОткрытьФорму("Обработка.УИ_ДинамическийСписок.Форма", СтрукПараметры, , ИмяОбъектаМетаданных, , ,
			ОписаниеОповещенияОЗавершении);
	КонецЕсли;

КонецПроцедуры

Процедура НайтиСсылкиНаОбъект(СсылкаНаОбъект) Экспорт
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("ОбъектПоиска", СсылкаНаОбъект);

	ОткрытьФорму("Обработка.УИ_ПоискСсылокНаОбъект.Форма", ПараметрыФормы);

КонецПроцедуры

Процедура ЗадатьВопросРазработчику() Экспорт
	НачатьЗапускПриложения(ПустоеОписаниеОповещенияДляЗапускаПриложения(),
		"https://github.com/cpr1c/tools_ui_1c/issues");

КонецПроцедуры

Процедура ОткрытьСтраницуРазработки() Экспорт
	НачатьЗапускПриложения(ПустоеОписаниеОповещенияДляЗапускаПриложения(), "https://github.com/cpr1c/tools_ui_1c");

КонецПроцедуры

Процедура ОткрытьСтраницуОсобенностейОтладкиПортативныхИнструметов() Экспорт
	НачатьЗапускПриложения(ПустоеОписаниеОповещенияДляЗапускаПриложения(),
		"https://github.com/cpr1c/tools_ui_1c/wiki/Особенности-использования-отладки-в-портативном-варианте");

КонецПроцедуры

Процедура ЗапуститьПроверкуОбновленияИнструментов() Экспорт
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("Обработка.УИ_ТехПоддержка.Форма.ОбновлениеИнструментов", ПараметрыФормы);
КонецПроцедуры

Процедура ОткрытьНовуюФормуИнструмента(ФормаНачальная)
	ОткрытьФорму(ФормаНачальная.ИмяФормы, , , Новый УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

#Область ПодключаемыеМетодыКомандИнструментов

Процедура Подключаемый_ВыполнитьОбщуюКомандуИнструментов(Форма, Команда) Экспорт
	Если Команда.Имя = "УИ_ОткрытьНовуюФормуИнструмента" Тогда
		ОткрытьНовуюФормуИнструмента(Форма);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область КомандыБСП

Процедура ДобавитьОбъектыКСравнению(МассивОбъектов, Контекст) Экспорт
	УИ_ОбщегоНазначенияКлиентСервер.ДобавитьМассивОбъектовКСравнению(МассивОбъектов);
КонецПроцедуры

Процедура ВыгрузитьОбъектыВXML(МассивОбъектов, Контекст) Экспорт
	АдресФайлаВоВременномХранилище="";
	УИ_ОбщегоНазначенияВызовСервера.ВыгрузитьОбъектыВXMLНаСервере(МассивОбъектов, АдресФайлаВоВременномХранилище,
		Контекст.Форма.УникальныйИдентификатор);

	Если ЭтоАдресВременногоХранилища(АдресФайлаВоВременномХранилище) Тогда
		ИмяФайла="Файл выгрузки.xml";
		ПолучитьФайл(АдресФайлаВоВременномХранилище, ИмяФайла);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработчикКомандыРедактироватьОбъект(СсылкаНаОбъект, Контекст) Экспорт
	РедактироватьОбъект(СсылкаНаОбъект);
КонецПроцедуры

Процедура ОбработчикКомандыНайтиСсылкиНаОбъект(СсылкаНаОбъект, Контекст) Экспорт
	НайтиСсылкиНаОбъект(СсылкаНаОбъект);
КонецПроцедуры

Процедура ОткрытьНастройкиОтладкиДополнительнойОбработки(СсылкаНаОбъект) Экспорт
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("ДополнительнаяОбработка", СсылкаНаОбъект);

	ОткрытьФорму("ОбщаяФорма.УИ_НастройкиОтладкиДополнительныхОбработок", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти
#Область РедактированиеТиповИПеременные

// Процедура - Редактировать тип
//
// Параметры:
//  ТипДанных						 - 	 - Текущий тип значения
//  РежимЗапуска					 - Число - режим запуска редактора типа
// 0- Выбор хранимых типов
// 1- типы для запроса
// 2- типы для поля СКД
// 3- типы для параметра СКД
//  СтандартнаяОбработка			 - Булево - Стандартная обработка события начало выбора
//  ВладелецФормы					 - 	 - 
//  ОписаниеОповещенияОЗавершении	 - 	 - 
//
Процедура РедактироватьТип(ТипДанных, РежимЗапуска, СтандартнаяОбработка, ВладелецФормы, ОписаниеОповещенияОЗавершении) Экспорт
	СтандартнаяОбработка=Ложь;

	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("ТипДанных", ТипДанных);
	ПараметрыФормы.Вставить("РежимЗапуска", РежимЗапуска);
	ОткрытьФорму("ОбщаяФорма.УИ_РедактированиеТипаЗначения", ПараметрыФормы, ВладелецФормы, , , ,
		ОписаниеОповещенияОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура РедактироватьТаблицуЗначений(ТаблицаЗначенийСтрокой, ВладелецФормы, ОписаниеОповещенияОЗавершении) Экспорт
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("ТаблицаЗначенийСтрокой", ТаблицаЗначенийСтрокой);

	ОткрытьФорму("ОбщаяФорма.УИ_РедакторТаблицыЗначений", ПараметрыФормы, ВладелецФормы, , , ,
		ОписаниеОповещенияОЗавершении);
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

Процедура ПолеФормыНачалоВыбораЗначения(Значение, СтандартнаяОбработка, ОписаниеОповещенияОЗавершении,
	ТипЗначения = Неопределено, ДоступныеЗначения = Неопределено) Экспорт
	ТипТекущегоЗначения=ТипЗнч(Значение);

	Если ТипТекущегоЗначения = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка=Ложь;

	КонецЕсли;
КонецПроцедуры

Процедура ПолеФормыИмяФайлаНачалоВыбора(СтруктураОписанияФайла, Элемент, ДанныеВыбора, СтандартнаяОбработка,
	РежимДиалога, ОписаниеОповещенияОЗавершении) Экспорт
	СтандартнаяОбработка=Ложь;

	ДополнительныеПараметрыОповещения=Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("Элемент", Элемент);
	ДополнительныеПараметрыОповещения.Вставить("СтруктураОписанияФайла", СтруктураОписанияФайла);
	ДополнительныеПараметрыОповещения.Вставить("РежимДиалога", РежимДиалога);
	ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);

	ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(
		Новый ОписаниеОповещения("ПолеФормыИмяФайлаНачалоВыбораЗавершениеПодключенияРасширенияРаботыСФайлами",
		ЭтотОбъект, ДополнительныеПараметрыОповещения));
КонецПроцедуры

Процедура ПолеФормыИмяФайлаНачалоВыбораЗавершениеПодключенияРасширенияРаботыСФайлами(Подключено,
	ДополнительныеПараметры) Экспорт
	ВыборФайла = ДиалогВыбораФайлаПоСтруктуреОписанияВыбираемогоФайла(ДополнительныеПараметры.РежимДиалога,
		ДополнительныеПараметры.СтруктураОписанияФайла);
	ВыборФайла.Показать(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеБиблиотекиИнструментов

Процедура СохранитьВспомогательныеБиблиотекиНаКлиентеПриНачалеРаботыСистемы() Экспорт
	КаталогБиблиотек=КаталогВспомогательныхБиблиотекИнструментов();
	
	//1. очищаем наш каталог. Под каждую базу он свой
	Сообщить(КаталогБиблиотек);
КонецПроцедуры

Функция КаталогВспомогательныхБиблиотекИнструментов() Экспорт
	СтруктураФайловыхПеременных=СтруктураФайловыхПеременныхСеанса();
	Если Не СтруктураФайловыхПеременных.Свойство("КаталогВременныхФайлов") Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтруктураФайловыхПеременных.КаталогВременныхФайлов + ПолучитьРазделительПути() + "tools_ui_1c" + ПолучитьРазделительПути()
КонецФункции
#КонецОбласти

#Область ХранилищеЗначения

Процедура РедактироватьХранилищеЗначения(Форма, АдресВременногоХранилищаЗначенияИлиЗначение,
	ОписаниеОповещения = Неопределено) Экспорт

	Если ОписаниеОповещения = Неопределено Тогда
		ПараметрыОписанияОповещения = Новый Структура;
		ПараметрыОписанияОповещения.Вставить("Форма", Форма);
		ПараметрыОписанияОповещения.Вставить("АдресВременногоХранилищаЗначенияИлиЗначение",
			АдресВременногоХранилищаЗначенияИлиЗначение);
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РедактироватьПараметрыЗаписиЗавершение", ЭтотОбъект,
			ПараметрыОписанияОповещения);
	Иначе
		ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеХЗ", АдресВременногоХранилищаЗначенияИлиЗначение);

	ОткрытьФорму("ОбщаяФорма.УИ_ФормаХранилищаЗначения", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор, , ,
		ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

Процедура РедактироватьХранилищеЗначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	//	Форма=ДополнительныеПараметры.Форма;
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗаписи

Процедура РедактироватьПараметрыЗаписи(Форма) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыЗаписи", УИ_ОбщегоНазначенияКлиентСервер.ПараметрыЗаписиФормы(Форма));
	
	Если Форма.ИмяФормы = "Обработка.УИ_РедакторРеквизитовОбъекта.Форма.ФормаОбъекта" Тогда
		МассивТипа = Новый Массив;
		МассивТипа.Добавить(ТипЗнч(Форма.мОбъектСсылка));
		
		ПараметрыФормы.Вставить("ТипОбъекта", Новый ОписаниеТипов(МассивТипа));
	КонецЕсли;

	ПараметрыОписанияОповещения = Новый Структура;
	ПараметрыОписанияОповещения.Вставить("Форма", Форма);
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("РедактироватьПараметрыЗаписиЗавершение", ЭтотОбъект,
		ПараметрыОписанияОповещения);

	ОткрытьФорму("ОбщаяФорма.УИ_ПараметрыЗаписи", ПараметрыФормы, Форма, , , , ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура РедактироватьПараметрыЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма = ДополнительныеПараметры.Форма;

	УИ_ОбщегоНазначенияКлиентСервер.УстановитьПараметрыЗаписиНаФорму(Форма, Результат);
КонецПроцедуры

#КонецОбласти

#Область СохранениеЧтениеДанныхКонсолей

Функция ПустоеОписаниеФорматаВыбираемогоФайла() Экспорт
	Описание=Новый Структура;
	Описание.Вставить("Расширение", "");
	ОПисание.Вставить("Имя", "");
	ОПисание.Вставить("Фильтр", "");

	Возврат Описание;
КонецФункции

Процедура ДобавитьФорматВОписаниеФайлаСохранения(СтруктураОписанияВыбираемогоФайла, ИмяФормата, РасширениеФайла, Фильтр = "") Экспорт
	Формат=ПустоеОписаниеФорматаВыбираемогоФайла();
	Формат.Имя=ИмяФормата;
	Формат.Расширение=РасширениеФайла;
	Формат.Фильтр = Фильтр;
	СтруктураОписанияВыбираемогоФайла.Форматы.Добавить(Формат);
КонецПроцедуры

Функция ПустаяСтруктураОписанияВыбираемогоФайла() Экспорт
	СтруктураОписания=Новый Структура;
	СтруктураОписания.Вставить("ИмяФайла", "");
	СтруктураОписания.Вставить("СериализуемыеФорматыФайлов", Новый Массив);
	СтруктураОписания.Вставить("Форматы", Новый Массив);

	Возврат СтруктураОписания;
КонецФункции

Функция ДиалогВыбораФайлаПоСтруктуреОписанияВыбираемогоФайла(Режим, СтруктураОписанияВыбираемогоФайла) Экспорт
			// Нужно запросить имя файла.
	ВыборФайла = Новый ДиалогВыбораФайла(Режим);
	ВыборФайла.МножественныйВыбор = Ложь;
	
	//В линуксе есть проблемы с выбором файла, если в существующем есть тире
	Если Не (УИ_ОбщегоНазначенияКлиентСервер.ЭтоLinux() И Найти(СтруктураОписанияВыбираемогоФайла.ИмяФайла, "-") > 0) Тогда
		ВыборФайла.ПолноеИмяФайла = СтруктураОписанияВыбираемогоФайла.ИмяФайла;
	КонецЕсли;

	Фильтр="";
	Для Каждого ТекФорматФайла Из СтруктураОписанияВыбираемогоФайла.Форматы Цикл
		РасширениеФормата=ТекФорматФайла.Расширение;
		Если ЗначениеЗаполнено(РасширениеФормата) Тогда
			ФильтрФормата="*." + РасширениеФормата;
		Иначе
			ФильтрФормата="*.*";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекФорматФайла.Фильтр) Тогда
			ФильтрФормата = ТекФорматФайла.Фильтр;
		КонецЕсли;

		Фильтр=Фильтр + ?(ЗначениеЗаполнено(Фильтр), "|", "") + СтрШаблон("%1|%2", ТекФорматФайла.Имя, ФильтрФормата);
	КонецЦикла;

	ВыборФайла.Фильтр = Фильтр;

	Если СтруктураОписанияВыбираемогоФайла.СериализуемыеФорматыФайлов.Количество() > 0 Тогда
		ВыборФайла.Расширение=СтруктураОписанияВыбираемогоФайла.СериализуемыеФорматыФайлов[0];
	ИначеЕсли СтруктураОписанияВыбираемогоФайла.Форматы.Количество() > 0 Тогда
		ВыборФайла.Расширение=СтруктураОписанияВыбираемогоФайла.Форматы[0].Расширение;
	КонецЕсли;

	Возврат ВыборФайла;
КонецФункции

#Область СохранениеДанныхКонсолей

// Описание
// 
// Параметры:
// 	СохранитьКак - Булево - Включен ли режим сохранения файла КАК. Т.е. всегда запрашивать куда сохранять, даже если уже есть имяфайла
// 	СтруктураОписанияСохраняемогоФайла -Структура - Содержит информацию, необходимую для идентификации файла, куда сохранять
// 		Содержит поля:
// 			ИмяФайла- Строка - Имя сохраняемого файла. Если не указано покажется диалог для сохранения
// 			Расширение- Строка- Расширение сохраняемого файла
// 			ИмяСохраняемогоФормата- Строка- описание формата сохраняемого файла
// 	АдресДанныхСохранения - Строка- Адрес во временном хранилище с сохраняемым значением. Сохраняемые данные будут дополнительно сериализованы с использованием сериализатора JSON
// 	ОписаниеОповещенияОЗавершении- ОписаниеОповещения- Описание оповещения после сохранения данных в файл
Процедура СохранитьДанныеКонсолиВФайл(ИмяКонсоли, СохранитьКак, СтруктураОписанияСохраняемогоФайла,
	АдресДанныхСохранения, ОписаниеОповещенияОЗавершении) Экспорт

	ДополнительныеПараметрыОповещения=Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("СохранитьКак", СохранитьКак);
	ДополнительныеПараметрыОповещения.Вставить("СтруктураОписанияСохраняемогоФайла", СтруктураОписанияСохраняемогоФайла);
	ДополнительныеПараметрыОповещения.Вставить("АдресДанныхСохранения", АдресДанныхСохранения);
	ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ДополнительныеПараметрыОповещения.Вставить("ИмяКонсоли", ИмяКонсоли);

	ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(
		Новый ОписаниеОповещения("СохранитьДанныеКонсолиВФайлПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект,
		ДополнительныеПараметрыОповещения));

КонецПроцедуры

Процедура СохранитьДанныеКонсолиВФайлПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	СохранитьКак = ДополнительныеПараметры.СохранитьКак;
	СтруктураОписанияСохраняемогоФайла=ДополнительныеПараметры.СтруктураОписанияСохраняемогоФайла;

	Если СохранитьКак Или СтруктураОписанияСохраняемогоФайла.ИмяФайла = "" Тогда
		ВыборФайла = ДиалогВыбораФайлаПоСтруктуреОписанияВыбираемогоФайла(РежимДиалогаВыбораФайла.Сохранение,
			СтруктураОписанияСохраняемогоФайла);
		ВыборФайла.Показать(Новый ОписаниеОповещения("СохранитьДанныеКонсолиВФайлПослеВыбораИмениФайла", ЭтотОбъект,
			ДополнительныеПараметры));
	Иначе
		СохранитьДанныеКонсолиВФайлНачатьПолучениеФайла(СтруктураОписанияСохраняемогоФайла.ИмяФайла,
			ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьДанныеКонсолиВФайлПослеВыбораИмениФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СохранитьДанныеКонсолиВФайлНачатьПолучениеФайла(ВыбранныеФайлы[0], ДополнительныеПараметры);
КонецПроцедуры

Процедура СохранитьДанныеКонсолиВФайлНачатьПолучениеФайла(ИмяФайла, ДополнительныеПараметры) Экспорт

	ПодготовленныеДанныеДляЗаписи=УИ_ОбщегоНазначенияВызовСервера.ПодготовленныеДанныеКонсолиДляЗаписиВФайл(
		ДополнительныеПараметры.ИмяКонсоли, ИмяФайла, ДополнительныеПараметры.АдресДанныхСохранения,
		ДополнительныеПараметры.СтруктураОписанияСохраняемогоФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, ПодготовленныеДанныеДляЗаписи));
	НачатьПолучениеФайлов(Новый ОписаниеОповещения("СохранитьДанныеКонсолиВФайлПослеПолученияФайлов", ЭтотОбъект,
		ДополнительныеПараметры), ПолучаемыеФайлы, ИмяФайла, Ложь);
КонецПроцедуры

Процедура СохранитьДанныеКонсолиВФайлПослеПолученияФайлов(ПолученныеФайлы, ДополнительныеПараметры) Экспорт

	ОбработкаОповещения = ДополнительныеПараметры.ОписаниеОповещенияОЗавершении;

	Если ПолученныеФайлы = Неопределено Тогда

		Если ОбработкаОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработкаОповещения, Неопределено);
		КонецЕсли;
	Иначе
		Если УИ_ОбщегоНазначенияКлиентСервер.ВерсияПлатформыНеМладше("8.3.13") Тогда
			ИмяФайла = ПолученныеФайлы[0].ПолноеИмя;
		Иначе
			ИмяФайла = ПолученныеФайлы[0].Имя;
		КонецЕсли;
		Если ОбработкаОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработкаОповещения, ИмяФайла);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанныхКонсолей

Процедура ПрочитатьДанныеКонсолиИзФайла(ИмяКонсоли, СтруктураОписанияЧитаемогоФайла, ОписаниеОповещенияОЗавершении, БезВыбораФайла = Ложь) Экспорт

	ДополнительныеПараметрыОповещения=Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("СтруктураОписанияЧитаемогоФайла", СтруктураОписанияЧитаемогоФайла);
	ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ДополнительныеПараметрыОповещения.Вставить("ИмяКонсоли", ИмяКонсоли);
	ДополнительныеПараметрыОповещения.Вставить("БезВыбораФайла", БезВыбораФайла);

	ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(
		Новый ОписаниеОповещения("ПрочитатьДанныеКонсолиИзФайлаПослеПодключенияРасширения", ЭтотОбъект,
		ДополнительныеПараметрыОповещения));

КонецПроцедуры

Процедура ПрочитатьДанныеКонсолиИзФайлаПослеПодключенияРасширения(Подключено, ДополнительныеПараметры) Экспорт

	ЗагружаемоеИмяФайла = ДополнительныеПараметры.СтруктураОписанияЧитаемогоФайла.ИмяФайла;
	БезВыбораФайла = ДополнительныеПараметры.БезВыбораФайла;

	Если Подключено Тогда

		Если БезВыбораФайла Тогда
			Если ЗначениеЗаполнено(ЗагружаемоеИмяФайла) Тогда
				ПомещаемыеФайлы=Новый Массив;
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ЗагружаемоеИмяФайла));

				НачатьПомещениеФайлов(
					Новый ОписаниеОповещения("ПрочитатьДанныеКонсолиИзФайлаПослеПомещенияФайлов", ЭтотОбъект,
					ДополнительныеПараметры), ПомещаемыеФайлы, , Ложь);
			КонецЕсли;
		Иначе
			ВыборФайла = ДиалогВыбораФайлаПоСтруктуреОписанияВыбираемогоФайла(РежимДиалогаВыбораФайла.Открытие,
				ДополнительныеПараметры.СтруктураОписанияЧитаемогоФайла);

			ВыборФайла.Показать(Новый ОписаниеОповещения("ПрочитатьДанныеКонсолиИзФайлаПослеВыбораФайла", ЭтотОбъект,
				ДополнительныеПараметры));
		КонецЕсли;
	Иначе
		ПомещаемыеФайлы=Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ЗагружаемоеИмяФайла));

		НачатьПомещениеФайлов(
			Новый ОписаниеОповещения("ПрочитатьДанныеКонсолиИзФайлаПослеПомещенияФайлов", ЭтотОбъект,
			ДополнительныеПараметры), ПомещаемыеФайлы, , ЗагружаемоеИмяФайла = "");

	КонецЕсли;

КонецПроцедуры

Процедура ПрочитатьДанныеКонсолиИзФайлаПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПомещаемыеФайлы=Новый Массив;
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ВыбранныеФайлы[0]));

	НачатьПомещениеФайлов(
				Новый ОписаниеОповещения("ПрочитатьДанныеКонсолиИзФайлаПослеПомещенияФайлов", ЭтотОбъект,
		ДополнительныеПараметры), ПомещаемыеФайлы, , Ложь);
КонецПроцедуры

Процедура ПрочитатьДанныеКонсолиИзФайлаПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт

	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;

	КонецЕсли;

	ПрочитатьДанныеКонсолиИзФайлаОтработкаЗагрузкиФайла(ПомещенныеФайлы, ДополнительныеПараметры);
КонецПроцедуры

Процедура ПрочитатьДанныеКонсолиИзФайлаОтработкаЗагрузкиФайла(ПомещенныеФайлы, ДополнительныеПараметры)

	СтруктураРезультата=Неопределено;

	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл

		Если ПомещенныйФайл.Хранение <> "" Тогда

			СтруктураРезультата=Новый Структура;
			СтруктураРезультата.Вставить("Адрес", ПомещенныйФайл.Хранение);
			Если УИ_ОбщегоНазначенияКлиентСервер.ВерсияПлатформыНеМладше("8.3.13") Тогда
				СтруктураРезультата.Вставить("ИмяФайла", ПомещенныйФайл.ПолноеИмя);
			Иначе
				СтруктураРезультата.Вставить("ИмяФайла", ПомещенныйФайл.Имя);
			КонецЕсли;

			Прервать;

		КонецЕсли;

	КонецЦикла;

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, СтруктураРезультата);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодключениеИУстановкаРасширенияРаботыСФайлами

Процедура ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(ОписаниеОповещенияОЗавершении, ПослеУстановки = Ложь) Экспорт
	ДополнительныеПараметрыОповещения=Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ДополнительныеПараметрыОповещения.Вставить("ПослеУстановки", ПослеУстановки);

	НачатьПодключениеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкойЗавершениеПодключенияРасширения",
		ЭтотОбъект, ДополнительныеПараметрыОповещения));

КонецПроцедуры

Процедура ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкойЗавершениеПодключенияРасширения(Подключено,
	ДополнительныеПараметры) Экспорт

	Если Подключено Тогда
		СтруктураФайловыхПеременныхСеанса=УИ_ПараметрыПриложения[ИмяПараметраФайловыхПеременныхСеанса()];
		Если СтруктураФайловыхПеременныхСеанса = Неопределено Тогда
			ПрочитатьОсновныеФайловыеПеременныеСеансаВПараметрыПриложения(
				Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкойЗавершениеЧтенияФайловыхПеременныхСеанса",
				ЭтотОбъект, ДополнительныеПараметры));
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
		КонецЕсли;
	ИначеЕсли Не ДополнительныеПараметры.ПослеУстановки Тогда
		НачатьУстановкуРасширенияРаботыСФайлами(
			Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкойЗавершениеУстановкиРасширения",
			ЭтотОбъект, ДополнительныеПараметры));
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкойЗавершениеЧтенияФайловыхПеременныхСеанса(Результат,
	ДополнительныеПараметры) Экспорт

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);

КонецПроцедуры

Процедура ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкойЗавершениеУстановкиРасширения(ДополнительныеПараметры) Экспорт
	ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении,
		Истина);
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПриложения

Функция НомерСеанса() Экспорт
	Возврат УИ_ПараметрыПриложения["НомерСеанса"];
КонецФункции

#КонецОбласти

#Область ЧтениеФайловыхПараметровСеансаВПараметрыПриложения

Функция ИмяПараметраФайловыхПеременныхСеанса() Экспорт
	Возврат "ФАЙЛОВЫЕ_ПЕРЕМЕННЫЕ";
КонецФункции

Функция СтруктураФайловыхПеременныхСеанса() Экспорт
	ТекущиеПараметрыПриложения=УИ_ПараметрыПриложения;

	СтруктураФайловыхПеременных=ТекущиеПараметрыПриложения[ИмяПараметраФайловыхПеременныхСеанса()];
	Если СтруктураФайловыхПеременных = Неопределено Тогда
		ТекущиеПараметрыПриложения[ИмяПараметраФайловыхПеременныхСеанса()]=Новый Структура;
		СтруктураФайловыхПеременных=ТекущиеПараметрыПриложения[ИмяПараметраФайловыхПеременныхСеанса()];
	КонецЕсли;

	Возврат СтруктураФайловыхПеременных;
КонецФункции

Процедура ПрочитатьОсновныеФайловыеПеременныеСеансаВПараметрыПриложения(ОписаниеОповещенияОЗавершении) Экспорт
	ДополнительныеПараметрыОповещения=Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);

	//1. каталог временных файлов
	НачатьПолучениеКаталогаВременныхФайлов(
		Новый ОписаниеОповещения("ПрочитатьОсновныеФайловыеПеременныеСеансаВПараметрыПриложенияПолучениеКаталогаВременныхФайловЗавершение",
		ЭтотОбъект, ДополнительныеПараметрыОповещения));
КонецПроцедуры

Процедура ПрочитатьОсновныеФайловыеПеременныеСеансаВПараметрыПриложенияПолучениеКаталогаВременныхФайловЗавершение(ИмяКаталога,
	ДополнительныеПараметры) Экспорт
	СтруктураФайловыхПеременных=СтруктураФайловыхПеременныхСеанса();
	СтруктураФайловыхПеременных.Вставить("КаталогВременныхФайлов", ИмяКаталога);

	НачатьПолучениеРабочегоКаталогаДанныхПользователя(
		Новый ОписаниеОповещения("ПрочитатьОсновныеФайловыеПеременныеСеансаВПараметрыПриложенияПолучениеРабочегоКаталогаДанныхПользователяЗавершение",
		ЭтотОбъект, ДополнительныеПараметры));
КонецПроцедуры

Процедура ПрочитатьОсновныеФайловыеПеременныеСеансаВПараметрыПриложенияПолучениеРабочегоКаталогаДанныхПользователяЗавершение(ИмяКаталога,
	ДополнительныеПараметры) Экспорт
	СтруктураФайловыхПеременных=СтруктураФайловыхПеременныхСеанса();
	СтруктураФайловыхПеременных.Вставить("РабочийКаталогДанныхПользователя", ИмяКаталога);

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
КонецПроцедуры

#КонецОбласти
#Область ЗапускПриложения1С


// Описание
// 
// Параметры:
// 	ТипКлиента - Число - Код режима запуска
// 		1 - Конфигуратор
// 		2 - Толстый клиент обычное приложение
// 		3 - Толстый клиент управляемое приложение
// 		4 - Тонкий клиент
// 	Пользователь - Строка - Имя пользователя БД, под которым нужно выполнить запуск
// 	РежимЗапускаПодПользователем - Булево - Определяет, будет ли изменен пароль пользователя перед запуском. После запуска пароль вернется назад
// Возвращаемое значение:
// 	
Функция ЗапуститьСеанс1С(ТипКлиента, Пользователь, РежимЗапускаПодПользователем = Ложь,
	ПаузаПередВосстановлениемПароля = 20) Экспорт
#Если ВебКлиент Тогда

#Иначе
		Папка1С = КаталогПрограммы();

		СтрокаЗапуска = Папка1С;

		РасширениеФайлаЗапуска = "";
		Если УИ_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
			РасширениеФайлаЗапуска=".EXE";
		КонецЕсли;

		Если ТипКлиента = 1 Тогда
			СтрокаЗапуска = СтрокаЗапуска + "1cv8" + РасширениеФайлаЗапуска + " DESIGNER";
		ИначеЕсли ТипКлиента = 2 Тогда
			СтрокаЗапуска = СтрокаЗапуска + "1cv8" + РасширениеФайлаЗапуска + " ENTERPRISE /RunModeOrdinaryApplication";
		ИначеЕсли ТипКлиента = 3 Тогда
			СтрокаЗапуска = СтрокаЗапуска + "1cv8" + РасширениеФайлаЗапуска + " ENTERPRISE /RunModeManagedApplication";
		Иначе
			СтрокаЗапуска = СтрокаЗапуска + "1cv8c" + РасширениеФайлаЗапуска + " ENTERPRISE";
		КонецЕсли;

		СтрокаСоединения=СтрокаСоединенияИнформационнойБазы();
		МассивПоказателейСтрокиСоединения = СтрРазделить(СтрокаСоединения, ";");

		СоответствиеПоказателейСтрокиСоединения = Новый Структура;
		Для Каждого СтрокаПоказателяСтрокиСоединения Из МассивПоказателейСтрокиСоединения Цикл
			МассивПоказателя = СтрРазделить(СтрокаПоказателяСтрокиСоединения, "=");

			Если МассивПоказателя.Количество() <> 2 Тогда
				Продолжить;
			КонецЕсли;

			Показатель = НРег(МассивПоказателя[0]);
			ЗначениеПоказателя = МассивПоказателя[1];
			СоответствиеПоказателейСтрокиСоединения.Вставить(Показатель, ЗначениеПоказателя);
		КонецЦикла;

		Если СоответствиеПоказателейСтрокиСоединения.Свойство("file") Тогда
			СтрокаЗапуска = СтрокаЗапуска + " /F" + СоответствиеПоказателейСтрокиСоединения.File;
		ИначеЕсли СоответствиеПоказателейСтрокиСоединения.Свойство("srvr") Тогда
			ПутьКБазе = УИ_СтроковыеФункцииКлиентСервер.ПутьБезКавычек(СоответствиеПоказателейСтрокиСоединения.srvr) + "\"
				+ УИ_СтроковыеФункцииКлиентСервер.ПутьБезКавычек(СоответствиеПоказателейСтрокиСоединения.ref);
			ПутьКБазе = УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(ПутьКБазе);
			СтрокаЗапуска = СтрокаЗапуска + " /S " + ПутьКБазе;
		ИначеЕсли СоответствиеПоказателейСтрокиСоединения.Свойство("ws") Тогда
			СтрокаЗапуска = СтрокаЗапуска + " /WS " + СоответствиеПоказателейСтрокиСоединения.ws;
		Иначе
			Сообщить(СтрокаСоединения);
		КонецЕсли;

		СтрокаЗапуска = СтрокаЗапуска + " /N""" + Пользователь + """";

		ДанныеСохраненногоПароляПользователяИБ = Неопределено;
		Если РежимЗапускаПодПользователем Тогда
			ВременныйПароль = "qwerty123456";
			ДанныеСохраненногоПароляПользователяИБ = УИ_ОбщегоНазначенияВызовСервера.ДанныеСохраненногоПароляПользователяИБ(
				Пользователь);
			УИ_ОбщегоНазначенияВызовСервера.УстановитьПарольПользователюИБ(Пользователь, ВременныйПароль);

			СтрокаЗапуска = СтрокаЗапуска + " /P" + ВременныйПароль;
		КонецЕсли;

		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("РежимЗапускаПодПользователем", РежимЗапускаПодПользователем);
		ДополнительныеПараметрыОповещения.Вставить("ДанныеСохраненногоПароляПользователяИБ",
			ДанныеСохраненногоПароляПользователяИБ);
		ДополнительныеПараметрыОповещения.Вставить("Пользователь", Пользователь);
		ДополнительныеПараметрыОповещения.Вставить("ПаузаПередВосстановлениемПароля", ПаузаПередВосстановлениемПароля);

		Попытка
			НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапуститьСеанс1СЗавершениеЗапуска", ЭтотОбъект,
				ДополнительныеПараметрыОповещения), СтрокаЗапуска);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
#КонецЕсли
КонецФункции

Процедура ЗапуститьСеанс1СЗавершениеЗапуска(КодВозврата, ДополнительныеПараметры) Экспорт
	Если Не ДополнительныеПараметры.РежимЗапускаПодПользователем Тогда
		Возврат;
	КонецЕсли;

	ВремяЗапуска = ТекущаяДата();
	Пока (ТекущаяДата() - ВремяЗапуска) < ДополнительныеПараметры.ПаузаПередВосстановлениемПароля Цикл
		ОбработкаПрерыванияПользователя();
	КонецЦикла;

	УИ_ОбщегоНазначенияВызовСервера.ВосстановитьДанныеПользователяПослеЗапускаСеансаПодПользователем(
		ДополнительныеПараметры.Пользователь, ДополнительныеПараметры.ДанныеСохраненногоПароляПользователяИБ);
КонецПроцедуры

#КонецОбласти
