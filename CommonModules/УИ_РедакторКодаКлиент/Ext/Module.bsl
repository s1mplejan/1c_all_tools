#Область ПрограммныйИнтерфейс

#Область СобытияФормыСРедакторром

Процедура ФормаПриОткрытии(Форма, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	Форма.УИ_РедакторКодаКлиентскиеДанные = Новый Структура;
	Форма.УИ_РедакторКодаКлиентскиеДанные.Вставить("События", Новый Массив);
	Форма.УИ_РедакторКодаКлиентскиеДанные.Вставить("ОбработчикиСобытий", Новый Структура);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ДопПараметры.Вставить("Форма", Форма);

	УИ_ОбщегоНазначенияКлиент.ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(
			Новый ОписаниеОповещения("ФормаПриОткрытииЗавершениеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект,
		ДопПараметры));
КонецПроцедуры

Процедура ПолеРедактораHTMLДокументСформирован(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	ПараметрыРедактора.Вставить("Инициализирован", Истина);

	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	Форма.ПодключитьОбработчикОжидания("Подключаемый_РедакторКодаОтложеннаяИнициализацияРедакторов", 0.1, Истина);
КонецПроцедуры

Процедура ПолеРедактораHTMLПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);
	ВидыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();

	Если ВидРедактора = ВидыРедактора.Monaco Тогда
		ПолеРедактораHTMLПриНажатииMonaco(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

Процедура ОтложеннаяОбработкаСобытийРедактора(Форма) Экспорт

	Для Каждого ТекущееСобытие Из Форма.УИ_РедакторКодаКлиентскиеДанные.События Цикл
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", ТекущееСобытие.Элемент);

		Если ТекущееСобытие.ИмяСобытия = "EVENT_QUERY_CONSTRUCT" Тогда
			ОткрытьКонструкторЗапросаMonaco(ТекущееСобытие.ДанныеСобытия, ДополнительныеПараметры);
		ИначеЕсли ТекущееСобытие.ИмяСобытия = "EVENT_FORMAT_CONSTRUCT" Тогда
			ОткрытьКонструкторФорматнойСтрокиMonaco(ТекущееСобытие.ДанныеСобытия, ДополнительныеПараметры);
		ИначеЕсли ТекущееСобытие.ИмяСобытия = "EVENT_GET_METADATA" Тогда
			МассивИменМетаданного = СтрРазделить(ТекущееСобытие.ДанныеСобытия, ".");

			Если МассивИменМетаданного[0] = "module" Тогда

				УстановитьОписаниеМодуляДляРедактораMonaco(ТекущееСобытие.ДанныеСобытия, ДополнительныеПараметры);

			Иначе

				УстановитьОписаниеМетаданныхДляРедактораMonaco(ТекущееСобытие.ДанныеСобытия, ДополнительныеПараметры);

			КонецЕсли;
		ИначеЕсли ТекущееСобытие.ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда 
			РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
			ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма,
																									   ТекущееСобытие.Элемент);
			СобытияРедактора = РедакторыФормы[ИдентификаторРедактора].СобытияРедактора;

			Если ЗначениеЗаполнено(СобытияРедактора.ПриИзменении) Тогда
				ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения(СобытияРедактора.ПриИзменении, Форма,
					ДополнительныеПараметры), ТекущееСобытие.Элемент);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Форма.УИ_РедакторКодаКлиентскиеДанные.События.Очистить();
КонецПроцедуры

#КонецОбласти

Функция ВсеРедакторыФормыИнициализированы(РедакторыФормы)
	Результат = Истина;
	Для Каждого КлючЗначение Из РедакторыФормы Цикл
		Если Не КлючЗначение.Значение.Инициализирован Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура ИнициализироватьРедаторыФормыПослеФормированияПолей(Форма, РедакторыФормы, ВидРедактора, ВидыРедактора)
	Для Каждого КлючЗначение Из РедакторыФормы Цикл
		ПараметрыРедактора = КлючЗначение.Значение;
		ЭлементФормыРедактора = Форма.Элементы[ПараметрыРедактора.ПолеРедактора];
		
		Если ВидРедактора = ВидыРедактора.Текст Тогда
			Если ЗначениеЗаполнено(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта) Тогда
				ЭлементФормыРедактора.Шрифт = Новый Шрифт(, ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта);
			КонецЕсли;
		ИначеЕсли ВидРедактора = ВидыРедактора.Ace Тогда 
			ДокументView = ЭлементФормыРедактора.Документ.defaultView;
			Если ЗначениеЗаполнено(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта) Тогда
				ДокументView.editor.setFontSize(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта);		
			КонецЕсли;
		ИначеЕсли ВидРедактора = ВидыРедактора.Monaco Тогда
			ДокументView = ЭлементФормыРедактора.Документ.defaultView;
			ДокументView.setOption("autoResizeEditorLayout", Истина);

			Инфо = Новый СистемнаяИнформация;
			ДокументView.init(Инфо.ВерсияПриложения);
			Если ПараметрыРедактора.Язык <> "bsl" Тогда
				ДокументView.setLanguageMode(ПараметрыРедактора.Язык);
				
				Если ПараметрыРедактора.Язык = "bsl_query" Тогда
					ДокументView.setOption("renderQueryDelimiters", Истина);
				КонецЕсли;
			КонецЕсли;
			ДокументView.hideScrollX();
			ДокументView.hideScrollY();
			ДокументView.showStatusBar();
			ДокументView.enableQuickSuggestions();
			Если ЗначениеЗаполнено(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта) Тогда
				ДокументView.setFontSize(ПараметрыРедактора.ПараметрыРедактора.РазмерШрифта);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыРедактора.ПараметрыРедактора.ВысотаСтрок) Тогда
				ДокументView.setLineHeight(ПараметрыРедактора.ПараметрыРедактора.ВысотаСтрок);
			КонецЕсли;

			ДокументView.disableKeyBinding(9);
			ДокументView.setOption("dragAndDrop", Истина);

			ТемыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыТемыРедактораMonaco();
			Если ПараметрыРедактора.ПараметрыРедактора.Тема = ТемыРедактора.Темная Тогда
				Если ПараметрыРедактора.Язык = "bsl_query" Тогда
					ДокументView.setTheme("bsl-dark-query");
				Иначе
					ДокументView.setTheme("bsl-dark");
				КонецЕсли;
			Иначе
				Если ПараметрыРедактора.Язык = "bsl_query" Тогда
					ДокументView.setTheme("bsl-white-query");
				Иначе
					ДокументView.setTheme("bsl-white");
				КонецЕсли;
			КонецЕсли;

			ЯзыкиРедактора = УИ_РедакторКодаКлиентСервер.ВариантыЯзыкаСинтаксисаРедактораMonaco();
			Если ПараметрыРедактора.ПараметрыРедактора.ЯзыкСинтаксиса = ЯзыкиРедактора.Английский Тогда
				ДокументView.switchLang();
			ИначеЕсли ПараметрыРедактора.ПараметрыРедактора.ЯзыкСинтаксиса = ЯзыкиРедактора.Авто Тогда
				ЯзыкСинтаксиса = УИ_ПараметрыПриложения["ЯзыкСинтаксисаКонфигурации"];
				Если ЯзыкСинтаксиса = "Английский" Тогда
					ДокументView.switchLang();
				КонецЕсли;
			КонецЕсли;

			ДокументView.minimap(ПараметрыРедактора.ПараметрыРедактора.ИспользоватьКартуКода);

			Если ПараметрыРедактора.ПараметрыРедактора.СкрытьНомераСтрок Тогда
				ДокументView.hideLineNumbers();
			КонецЕсли;

			Если ПараметрыРедактора.ПараметрыРедактора.ОтображатьПробелыИТабуляции Тогда
				ДокументView.renderWhitespace(Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыРедактора.СобытияРедактора.ПриИзменении) Тогда
				ДокументView.setOption("generateModificationEvent", Истина);
			КонецЕсли;
						
			ДокументView.clearMetadata();

			ОписаниеКонфигурацииДляИнициализации = ОписаниеМетаданныйДляИнициализацииРедактораMonaco();

			ДокументView.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(
				ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
				ОписаниеКонфигурацииДляИнициализации.ОбщиеМодули)), "commonModules.items");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РедакторКодаОтложеннаяИнициализацияРедакторов(Форма) Экспорт
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);
	ВидыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];

	ИнициализироватьРедаторыФормыПослеФормированияПолей(Форма, РедакторыФормы, ВидРедактора, ВидыРедактора);
	Форма.Подключаемый_РедакторКодаЗавершениеИнициализации();
//	Форма.Подключаемый_ПолеРедактораЗавершениеИнициализации(УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент));
КонецПроцедуры

Процедура УстановитьТекстРедактораЭлементаФормы(Форма, Элемент, Текст) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьТекстРедактора(Форма, ИдентификаторРедактора, Текст);
КонецПроцедуры

Процедура УстановитьТекстРедактора(Форма, ИдентификаторРедактора, Текст, УстанавливатьОригинальныйТекст = Ложь) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		Форма[ПараметрыРедактора.ИмяРеквизита] = Текст;
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.editor.setValue(Текст, -1);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		Если УстанавливатьОригинальныйТекст Тогда
			ДокументHTML.setOriginalText(Текст);
		КонецЕсли;
		ДокументHTML.updateText(Текст);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьОригинальныйТекстРедактора(Форма, ИдентификаторРедактора, Текст) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	Если ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.setOriginalText(Текст);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьОригинальныйТекстРедактораРавнымТекущему(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	Если ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.getText();
		ДокументHTML.setOriginalText(ТекстКода);
	КонецЕсли;
КонецПроцедуры

Функция ТекстКодаРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат "";
	КонецЕсли;
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	ТекстКода="";

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ТекстКода = Форма[ПараметрыРедактора.ИмяРеквизита];
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getValue();
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.getText();
	КонецЕсли;

	Возврат СокрЛП(ТекстКода);
КонецФункции

Функция ТекстКодаРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Возврат ТекстКодаРедактора(Форма, ИдентификаторРедактора);
КонецФункции

Функция ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат НовыйГраницыВыделения();
	КонецЕсли;

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	ГраницыВыделения = НовыйГраницыВыделения();

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ЭлементРедактора = Форма.Элементы[ПараметрыРедактора.ПолеРедактора];
			
		ЭлементРедактора.ПолучитьГраницыВыделения(ГраницыВыделения.НачалоСтроки, ГраницыВыделения.НачалоКолонки,
			ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки);		
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ВыделеннаяОбласть = ДокументHTML.editor.getSelectionRange();
		
		ГраницыВыделения.НачалоСтроки = ВыделеннаяОбласть.start.row;
		ГраницыВыделения.НачалоКолонки = ВыделеннаяОбласть.start.column;
		ГраницыВыделения.КонецСтроки = ВыделеннаяОбласть.end.row;
		ГраницыВыделения.КонецКолонки = ВыделеннаяОбласть.end.column;
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		
		Выделение = ДокументHTML.getSelection();
		ГраницыВыделения.НачалоСтроки = Выделение.startLineNumber;
		ГраницыВыделения.НачалоКолонки = Выделение.startColumn;
		ГраницыВыделения.КонецСтроки = Выделение.endLineNumber;
		ГраницыВыделения.КонецКолонки = Выделение.endColumn;
	КонецЕсли;

	Возврат ГраницыВыделения;
	
КонецФункции

Функция ГраницыВыделенияРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат НовыйГраницыВыделения();
	КонецЕсли;
	
	Возврат ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);	
КонецФункции

Процедура УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, НачалоСтроки, НачалоКолонки, КонецСтроки,
	КонецКолонки) Экспорт

	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ЭлементРедактора = Форма.Элементы[ПараметрыРедактора.ПолеРедактора];
			
		ЭлементРедактора.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);		
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.setSelection(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.setSelection(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьГраницыВыделенияЭлементаФормы(Форма, Элемент, НачалоСтроки, НачалоКолонки, КонецСтроки,
	КонецКолонки) Экспорт

	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);

КонецПроцедуры

Процедура ВставитьТекстПоПозицииКурсора(Форма, ИдентификаторРедактора, Текст) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ЭлементРедактора = Форма.Элементы[ПараметрыРедактора.ПолеРедактора];
		ЭлементРедактора.ВыделенныйТекст = Текст;	
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.editor.insert(Текст);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.selectedText(Текст);
	КонецЕсли;
КонецПроцедуры

Процедура ВставитьТекстПоПозицииКурсораЭлементаФормы(Форма, Элемент, Текст) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВставитьТекстПоПозицииКурсора(Форма, ИдентификаторРедактора, Текст);
	
КонецПроцедуры

Процедура ДобавитьКонтекстРедактораКода(Форма, ИдентификаторРедактора, ДобавляемыйКонтекст) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы =  Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	Если ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;

		СоответствиеТипов = СоответствиеСсылочныхТиповКонфигурации();

		ОбъектыДобавления = Новый Структура;
		
		ЗаполнитьСтруктуруКонтекстаРедактораКодаMonaco(ОбъектыДобавления, ДобавляемыйКонтекст, СоответствиеТипов);

		ДокументHTML.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(Новый Структура("customObjects",
			ОбъектыДобавления)));
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьКонструкторЗапроса(ТекстЗапроса, ОписаниеОповещенияОЗавершении, РежимКомпоновки = Ложь) Экспорт
#Если Не МобильныйКлиент Тогда
	Конструктор=Новый КонструкторЗапроса;
	Если УИ_ОбщегоНазначенияКлиентСервер.ВерсияПлатформыНеМладше_8_3_14() Тогда
		Конструктор.РежимКомпоновкиДанных=РежимКомпоновки;
	КонецЕсли;

	Если ЗначениеЗаполнено(СокрЛП(ТекстЗапроса)) Тогда
		Попытка
			Конструктор.Текст=ТекстЗапроса;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Конструктор.Показать(ОписаниеОповещенияОЗавершении);
#КонецЕсли
КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ОписаниеОповещенияОЗавершении) Экспорт
	Конструктор = Новый КонструкторФорматнойСтроки;
	Попытка
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение( , "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	Конструктор.Показать(ОписаниеОповещенияОЗавершении);
КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлы(ОписаниеОповещенияОЗавершении, ТекущиеКаталоги) Экспорт
	ДопПараметрыОповещения = Новый Структура;
	ДопПараметрыОповещения.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ДопПараметрыОповещения.Вставить("ТекущиеКаталоги", ТекущиеКаталоги);

	УИ_ОбщегоНазначенияКлиент.ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(
		Новый ОписаниеОповещения("СохранитьМодулиКонфигурацииВФайлыЗавершениеПодключенияРасширенияРаботыСФайлами",
		ЭтотОбъект, ДопПараметрыОповещения));

КонецПроцедуры

Функция ВыделенныйТекстРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат "";
	КонецЕсли;
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	ТекстКода="";

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ТекстКода = Форма.Элементы[ПараметрыРедактора.ПолеРедактора].ВыделенныйТекст;
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getCopyText();
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.selectedText();
	КонецЕсли;

	Возврат СокрЛП(ТекстКода);
	
КонецФункции

Функция ВыделенныйТекстРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Возврат ВыделенныйТекстРедактора(Форма, ИдентификаторРедактора);
	
КонецФункции

Процедура ДобавитьКомментарииСтрокРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ТекстКода = Форма[ПараметрыРедактора.ИмяРеквизита];
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);

		ДобавитьВТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, "//");
		Форма[ПараметрыРедактора.ИмяРеквизита] = ТекстКода;
		
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки + 2);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getValue();
		
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);
		ГраницыВыделения.НачалоСтроки = ГраницыВыделения.НачалоСтроки + 1;
		ГраницыВыделения.КонецСтроки = ГраницыВыделения.КонецСтроки + 1;
		
		ДобавитьВТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, "//");
		
		ДокументHTML.editor.setValue(ТекстКода, -1);
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки-1,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки-1, ГраницыВыделения.КонецКолонки + 2);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.addComment();
				
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки + 2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомментарииСтрокРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДобавитьКомментарииСтрокРедактора(Форма, ИдентификаторРедактора);
КонецПроцедуры

Процедура УдалитьКомментарииСтрокРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ТекстКода = Форма[ПараметрыРедактора.ИмяРеквизита];
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);

		УдалитьТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, "//");
		Форма[ПараметрыРедактора.ИмяРеквизита] = ТекстКода;
		
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки + 2);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getValue();
		
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);
		ГраницыВыделения.НачалоСтроки = ГраницыВыделения.НачалоСтроки + 1;
		ГраницыВыделения.КонецСтроки = ГраницыВыделения.КонецСтроки + 1;
		
		УдалитьТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, "//");
		
		ДокументHTML.editor.setValue(ТекстКода, -1);
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки-1,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки-1, ГраницыВыделения.КонецКолонки + 2);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.removeComment();
				
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки + 2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомментарииСтрокРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УдалитьКомментарииСтрокРедактора(Форма, ИдентификаторРедактора);
КонецПроцедуры


Процедура ДобавитьПереносСтрокРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ТекстКода = Форма[ПараметрыРедактора.ИмяРеквизита];
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);

		ДобавитьВТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, "|");
		Форма[ПараметрыРедактора.ИмяРеквизита] = ТекстКода;
		
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки + 2);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getValue();
		
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);
		ГраницыВыделения.НачалоСтроки = ГраницыВыделения.НачалоСтроки + 1;
		ГраницыВыделения.КонецСтроки = ГраницыВыделения.КонецСтроки + 1;
		
		ДобавитьВТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, "|");
		
		ДокументHTML.editor.setValue(ТекстКода, -1);
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки-1,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки-1, ГраницыВыделения.КонецКолонки + 2);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.addWordWrap();
				
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки + 2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПереносСтрокРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДобавитьПереносСтрокРедактора(Форма, ИдентификаторРедактора);
КонецПроцедуры

Процедура УдалитьПереносСтрокРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ТекстКода = Форма[ПараметрыРедактора.ИмяРеквизита];
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);

		УдалитьТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, "|");
		Форма[ПараметрыРедактора.ИмяРеквизита] = ТекстКода;
		
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки + 2);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getValue();
		
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);
		ГраницыВыделения.НачалоСтроки = ГраницыВыделения.НачалоСтроки + 1;
		ГраницыВыделения.КонецСтроки = ГраницыВыделения.КонецСтроки + 1;
		
		УдалитьТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, "|");
		
		ДокументHTML.editor.setValue(ТекстКода, -1);
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки-1,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки-1, ГраницыВыделения.КонецКолонки + 2);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ГраницыВыделения = ГраницыВыделенияРедактора(Форма, ИдентификаторРедактора);
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.removeWordWrap();
				
		УстановитьГраницыВыделения(Форма, ИдентификаторРедактора, ГраницыВыделения.НачалоСтроки,
			ГраницыВыделения.НачалоКолонки + 2, ГраницыВыделения.КонецСтроки, ГраницыВыделения.КонецКолонки + 2);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПереносСтрокРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УдалитьПереносСтрокРедактора(Форма, ИдентификаторРедактора);
КонецПроцедуры



#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ФормаПриОткрытииЗавершениеПодключенияРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	АдресБиблиотеки =  ДополнительныеПараметры.Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаАдресБиблиотеки()];
	Если АдресБиблиотеки = Неопределено Или Не ЗначениеЗаполнено(АдресБиблиотеки) Тогда
		ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора(Истина, ДополнительныеПараметры);
	Иначе
		ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(ДополнительныеПараметры.Форма);

		СохранитьБиблиотекуРедактораНаДиск(АдресБиблиотеки, ВидРедактора,
			Новый ОписаниеОповещения("ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора", ЭтотОбъект,
			ДополнительныеПараметры));
	КонецЕсли;
КонецПроцедуры

Процедура ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	ВидРедактора = УИ_РедакторКодаКлиентСервер.ВидРедактораКодаФормы(Форма);
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();

	Если УИ_РедакторКодаКлиентСервер.РедакторКодаИспользуетПолеHTML(ВидРедактора) Тогда
		Для Каждого КлючЗначение Из Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()] Цикл
			//ИмяРеквизитаРедактора = УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКода(КлючЗначение.Значение.ИмяРеквизита);	

			Если ВидРедактора = ВидыРедакторов.Monaco Тогда
				Форма[КлючЗначение.Значение.ИмяРеквизита] = КаталогСохраненияРедактора(ВидРедактора)
					+ ПолучитьРазделительПути() + "index.html";
			ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
				Форма[КлючЗначение.Значение.ИмяРеквизита] = ИмяФайлаРедактораAceДляЯзыка(КлючЗначение.Значение.Язык);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РедакторКодаОтложеннаяИнициализацияРедакторов(Форма);
	КонецЕсли;
	
	// Оповестим о завершении обработки инициализации редакторов при открытии формы
	ОписаниеОповещенияОЗавершении= ДополнительныеПараметры.ОписаниеОповещенияОЗавершении;
	Если ОписаниеОповещенияОЗавершении = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораНаДискЗавершениеСозданияКаталогаБиблиотеки(ИмяКаталога, ДополнительныеПараметры) Экспорт

	АдресБиблиотеки = ДополнительныеПараметры.АдресБиблиотеки;
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;

	МассивСохраненныхФайлов = Новый Массив;
	СоответствиеФайловБиблиотеки=ПолучитьИзВременногоХранилища(АдресБиблиотеки);

	Если ДополнительныеПараметры.ВидРедактора = "Ace" Тогда
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "bsl");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "xml");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "bsl_query");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "css");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "javascript");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "html");
	КонецЕсли;

	ДополнительныеПараметры.Вставить("МассивСохраненныхФайлов", МассивСохраненныхФайлов);
	ДополнительныеПараметры.Вставить("СоответствиеФайловБиблиотеки", СоответствиеФайловБиблиотеки);

	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораРаспаковатьБиблиотекуРедактораВКаталог(ДополнительныеПараметры,
	ОписаниеОповещенияОЗаверешнии) Экспорт
#Если Не ВебКлиент И Не МобильныйКлиент Тогда
	Поток=ДополнительныеПараметры.СоответствиеФайловБиблиотеки[ДополнительныеПараметры.ТекКлючФайла].ОткрытьПотокДляЧтения();

	ЧтениеZIP=Новый ЧтениеZipФайла(Поток);
	ЧтениеZIP.ИзвлечьВсе(ДополнительныеПараметры.КаталогСохраненияБибилиотеки,
		РежимВосстановленияПутейФайловZIP.Восстанавливать);

#КонецЕсли

КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораРаспаковатьБиблиотекуРедактораВКаталогЗавершение(Результат,
	ДополнительныеПараметры) Экспорт

КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаЗавершение(ДополнительныеПараметры) Экспорт
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	МассивСохраненныхФайлов.Добавить(ДополнительныеПараметры.ТекКлючФайла);

	Файл = Новый Файл(ДополнительныеПараметры.ТекКлючФайла);

	Если Файл.Расширение = ".zip" Тогда
		СохранитьБиблиотекуРедактораРаспаковатьБиблиотекуРедактораВКаталог(ДополнительныеПараметры,
			Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораРаспаковатьБиблиотекуРедактораВКаталогЗавершение",
			ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;	
		//Иначе
	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
	//КонецЕсли;
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаТекстовогоДокументаЗавершение(Результат,
	ДополнительныеПараметры) Экспорт
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	МассивСохраненныхФайлов.Добавить(ДополнительныеПараметры.ТекКлючФайла);

	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораНаДискЗавершениеПроверкиСуществованияБиблиотекиНаДиске(Существует,
	ДополнительныеПараметры) Экспорт
	Если Существует Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;

	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;

	НачатьСозданиеКаталога(
		Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораНаДискЗавершениеСозданияКаталогаБиблиотеки", ЭтотОбъект,
		ДополнительныеПараметры), КаталогСохраненияБибилиотеки);

КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыЗавершениеПодключенияРасширенияРаботыСФайлами(Результат,
	ДополнительныеПараметры) Экспорт
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущиеКаталоги", ДополнительныеПараметры.ТекущиеКаталоги);

	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещенияОЗавершении",
		ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);

	ОткрытьФорму("ОбщаяФорма.УИ_НастройкиСохраненияИсходныхФайловКонфигурации", ПараметрыФормы, , , , ,
		Новый ОписаниеОповещения("СохранитьМодулиКонфигурацииВФайлыЗавершениеНастроек", ЭтотОбъект,
		ДополнительныеПараметрыОповещения), РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыЗавершениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОписаниеМетаданныхКонфигурации = УИ_РедакторКодаВызовСервера.ОписаниеМетаданныхКонфигурации(Ложь);

	ПараметрыСохраненияИсходныхФайлов = Новый Структура;
	ПараметрыСохраненияИсходныхФайлов.Вставить("ОписаниеМетаданныхКонфигурации", ОписаниеМетаданныхКонфигурации);
	ПараметрыСохраненияИсходныхФайлов.Вставить("Параметры", Результат);
	ПараметрыСохраненияИсходныхФайлов.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ПараметрыСохраненияИсходныхФайлов.Вставить("ИндексКаталога", 0);

	СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохраненияИсходныхФайлов);

КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохранения)
	Если ПараметрыСохранения.ИндексКаталога >= ПараметрыСохранения.Параметры.КаталогиИсточников.Количество() Тогда
		СохранитьМодулиКонфигурацииВФайлыЗавершение(ПараметрыСохранения);
		Возврат;
	КонецЕсли;

	ОписаниеКаталогаИсточника = ПараметрыСохранения.Параметры.КаталогиИсточников[ПараметрыСохранения.ИндексКаталога];

	ПараметрыСохранения.Вставить("ОписаниеКаталогаИсточника", ОписаниеКаталогаИсточника);
	
	//Сначала нужно очистить каталог
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("СохранитьМодулиКонфигурацииВФайлыЗавершениеУдалениеФайловКаталога",
		ЭтотОбъект, ПараметрыСохранения), ОписаниеКаталогаИсточника.Каталог, "*");

КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыЗавершениеУдалениеФайловКаталога(ПараметрыСохранения) Экспорт
	Если ПараметрыСохранения.ОписаниеКаталогаИсточника.ТолькоМодули Тогда
		СохранитьМодулиКонфигурацииВФайлыСохранитьСписокМетаданныхСМодулями(ПараметрыСохранения);
	Иначе
		СохранитьМодулиКонфигурацииВФайлыЗАпуститьКонфигуратовДляВыгрузкиМетаданных(ПараметрыСохранения);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыСохранитьСписокМетаданныхСМодулями(ПараметрыСохранения) Экспорт
	ТекстМетаданных = Новый ТекстовыйДокумент;

	Если ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник <> "ОсновнаяКонфигурация" Тогда
		ИмяРасширения = ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник;
	Иначе
		ИмяРасширения = Неопределено;
	КонецЕсли;
	
	Для Каждого ТекКоллекция Из ПараметрыСохранения.ОписаниеМетаданныхКонфигурации Цикл
		Если ТипЗнч(ТекКоллекция.Значение)<> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекКоллекция.Ключ = "Справочники" Тогда
			ИмяКоллекцииДляФайла = "Catalog";
		ИначеЕсли ТекКоллекция.Ключ = "Документы" Тогда
			ИмяКоллекцииДляФайла = "Document";
		ИначеЕсли ТекКоллекция.Ключ = "РегистрыСведений" Тогда
			ИмяКоллекцииДляФайла = "InformationRegister";
		ИначеЕсли ТекКоллекция.Ключ = "РегистрыНакопления" Тогда
			ИмяКоллекцииДляФайла = "AccumulationRegister";
		ИначеЕсли ТекКоллекция.Ключ = "РегистрыБухгалтерии" Тогда
			ИмяКоллекцииДляФайла = "AccountingRegister";
		ИначеЕсли ТекКоллекция.Ключ = "РегистрыРасчета" Тогда
			ИмяКоллекцииДляФайла = "CalculationRegister";
		ИначеЕсли ТекКоллекция.Ключ = "Обработки" Тогда
			ИмяКоллекцииДляФайла = "DataProcessor";
		ИначеЕсли ТекКоллекция.Ключ = "Отчеты" Тогда
			ИмяКоллекцииДляФайла = "Report";
		ИначеЕсли ТекКоллекция.Ключ = "Перечисления" Тогда
			ИмяКоллекцииДляФайла = "Enum";
		ИначеЕсли ТекКоллекция.Ключ = "ОбщиеМодули" Тогда
			ИмяКоллекцииДляФайла = "CommonModule";
		ИначеЕсли ТекКоллекция.Ключ = "ПланыСчетов" Тогда
			ИмяКоллекцииДляФайла = "ChartOfAccounts";
		ИначеЕсли ТекКоллекция.Ключ = "БизнесПроцессы" Тогда
			ИмяКоллекцииДляФайла = "BusinessProcess";
		ИначеЕсли ТекКоллекция.Ключ = "Задачи" Тогда
			ИмяКоллекцииДляФайла = "Task";
		ИначеЕсли ТекКоллекция.Ключ = "ПланыОбмена" Тогда
			ИмяКоллекцииДляФайла = "ExchangePlan";
		ИначеЕсли ТекКоллекция.Ключ = "ПланыВидовХарактеристик" Тогда
			ИмяКоллекцииДляФайла = "ChartOfCharacteristicTypes";
		ИначеЕсли ТекКоллекция.Ключ = "ПланыВидовРасчета" Тогда
			ИмяКоллекцииДляФайла = "ChartOfCalculationTypes";
		ИначеЕсли ТекКоллекция.Ключ = "Константы" Тогда
			ИмяКоллекцииДляФайла = "Constant";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючЗначениеМетаданных Из ТекКоллекция.Значение Цикл
			Если КлючЗначениеМетаданных.Значение.Расширение<>ИмяРасширения Тогда
				Продолжить;
			КонецЕсли;
			ТекстМетаданных.ДобавитьСтроку(ИмяКоллекцииДляФайла+"."+КлючЗначениеМетаданных.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураФайловыхПеременныхСеанса = УИ_ОбщегоНазначенияКлиент.СтруктураФайловыхПеременныхСеанса();
	ИмяФайлаСохранения = СтруктураФайловыхПеременныхСеанса.КаталогВременныхФайлов + ПолучитьРазделительПути() + "tools_ui_1c_list_metadata.txt";
	ПараметрыСохранения.Вставить("ИмяФайлаСпискаМетаданных", ИмяФайлаСохранения);
	ТекстМетаданных.НачатьЗапись(
		Новый ОписаниеОповещения("СохранитьМодулиКонфигурацииВФайлыСохранитьСписокМетаданныхСМодулямиЗавершение",
		ЭтотОбъект, ПараметрыСохранения), ИмяФайлаСохранения);

КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыСохранитьСписокМетаданныхСМодулямиЗавершение(Результат, ПараметрыСохранения) Экспорт
	Если Результат<>Истина Тогда
		Сообщить("Не удалось сохранить список метаданных с модулями в файл для источника "
			+ ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник);

		ПараметрыСохранения.ИндексКаталога = ПараметрыСохранения.ИндексКаталога + 1;
		СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохранения);
		Возврат;
	КонецЕсли;	
	
	СохранитьМодулиКонфигурацииВФайлыЗАпуститьКонфигуратовДляВыгрузкиМетаданных(ПараметрыСохранения);

КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыЗАпуститьКонфигуратовДляВыгрузкиМетаданных(ПараметрыСохранения) Экспорт
	СтрокаЗапускаПриложения = УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(
		ПараметрыСохранения.Параметры.ФайлЗапускаПлатформы) + " DESIGNER";

	Если ПараметрыСохранения.Параметры.РасположениеБазы = 0 Тогда
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /F " + УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(
			ПараметрыСохранения.Параметры.КаталогИнформационнойБазы);
	Иначе
		ПутьКБазе = ПараметрыСохранения.Параметры.СерверИБ + "\" + ПараметрыСохранения.Параметры.ИмяБазы;
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /S " + УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(
			ПутьКБазе);
	КонецЕсли;
	СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /N" + УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(
		ПараметрыСохранения.Параметры.Пользователь);

	Если ЗначениеЗаполнено(ПараметрыСохранения.Параметры.Пароль) Тогда
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /P" + УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(
			ПараметрыСохранения.Параметры.Пароль);
	КонецЕсли;
	СтрокаЗапускаПриложения = СтрокаЗапускаПриложения +" /DisableStartupMessages /DisableStartupDialogs";

	СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /DumpConfigToFiles "
		+ УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(ПараметрыСохранения.ОписаниеКаталогаИсточника.Каталог)
		+ " -format Hierarchical";
		
	Если ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник <> "ОсновнаяКонфигурация" Тогда
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " -Extension "
			+ ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник;
	КонецЕсли;
	Если ПараметрыСохранения.ОписаниеКаталогаИсточника.ТолькоМодули Тогда
		СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " -listFile "
			+ УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(ПараметрыСохранения.ИмяФайлаСпискаМетаданных);

	КонецЕсли;
	СтруктураФайловыхПеременныхСеанса = УИ_ОбщегоНазначенияКлиент.СтруктураФайловыхПеременныхСеанса();
	
	ПараметрыСохранения.Вставить("ИмяФайлаЛогаЗапускаКонфигуратора",
		СтруктураФайловыхПеременныхСеанса.КаталогВременныхФайлов + ПолучитьРазделительПути()
		+ "tools_ui_1c_list_metadata_out.txt");

	СтрокаЗапускаПриложения = СтрокаЗапускаПриложения + " /Out " + УИ_СтроковыеФункцииКлиентСервер.ОбернутьВКавычки(
		ПараметрыСохранения.ИмяФайлаЛогаЗапускаКонфигуратора);

	НачатьЗапускПриложения(
		Новый ОписаниеОповещения("СохранитьМодулиКонфигурацииВФайлыЗавершениеВыгрузкиИсходниковМетаданныхВКаталог",
		ЭтотОбъект, ПараметрыСохранения), СтрокаЗапускаПриложения, , Истина);
КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыЗавершениеВыгрузкиИсходниковМетаданныхВКаталог(КодЗавершения,
	ПараметрыСохранения) Экспорт
	Если КодЗавершения <> 0 Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;

		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
		ДополнительныеПараметрыОповещения.Вставить("ПараметрыСохранения", ПараметрыСохранения);

		ТекстовыйДокумент.НачатьЧтение(
			Новый ОписаниеОповещения("СохранитьМодулиКонфигурацииВФайлыЗавершениеВыгрузкиИсходниковМетаданныхВКаталогЗавершениеЧтенияЛога",
			ЭтотОбъект, ДополнительныеПараметрыОповещения), ПараметрыСохранения.ИмяФайлаЛогаЗапускаКонфигуратора);
		Возврат;
	КонецЕсли;
	ПараметрыСохранения.ИндексКаталога = ПараметрыСохранения.ИндексКаталога + 1;
	СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохранения);
КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыЗавершениеВыгрузкиИсходниковМетаданныхВКаталогЗавершениеЧтенияЛога(ДополнительныеПараметры) Экспорт
	ПараметрыСохранения = ДополнительныеПараметры.ПараметрыСохранения;
	ТекстовыйДокумент = ДополнительныеПараметры.ТекстовыйДокумент;
	Сообщить("Не удалось сохранить исходные файлы для источника "
		+ ПараметрыСохранения.ОписаниеКаталогаИсточника.Источник + ":" + Символы.ПС + ТекстовыйДокумент.ПолучитьТекст());
		
	ПараметрыСохранения.ИндексКаталога = ПараметрыСохранения.ИндексКаталога + 1;
	СохранитьМодулиКонфигурацииВФайлыНачалоОбработкиКаталогаИсточника(ПараметрыСохранения);

КонецПроцедуры

Процедура СохранитьМодулиКонфигурацииВФайлыЗавершение(ПараметрыСохранения)
	ВыполнитьОбработкуОповещения(ПараметрыСохранения.ДополнительныеПараметры.ОписаниеОповещенияОЗавершении,
		ПараметрыСохранения.Параметры.КаталогиИсточников);
КонецПроцедуры

#Область Monaco

Процедура ПриЗавершенииРедактированияФорматнойСтрокиMonaco(Текст, ДополнительныеПараметры) Экспорт
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ФорматнаяСтрока = СтрЗаменить(Текст, "'", "");
	ФорматнаяСтрока = """" + ФорматнаяСтрока + """";

	ДокументView = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.Элемент.Имя].Документ.defaultView;

	Если ДополнительныеПараметры.Свойство("Позиция") Тогда
		УстановитьТекстMonaco(ДокументView, ФорматнаяСтрока, УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(
			ДополнительныеПараметры.Позиция), Истина);
	Иначе
		УстановитьТекстMonaco(ДокументView, ФорматнаяСтрока, , Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗавершенииРедактированияЗапросаMonaco(Текст, ДополнительныеПараметры) Экспорт
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;

	isQueryMode = Ложь;
	Если ДополнительныеПараметры.Свойство("isQueryMode") Тогда
		isQueryMode = ДополнительныеПараметры.isQueryMode;
	КонецЕсли;
	
	Если isQueryMode Тогда
		ТекстЗапроса = Текст;
	Иначе
		ТекстЗапроса = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", """""");
		ТекстЗапроса = """" + ТекстЗапроса + """";
	КонецЕсли;

	ДокументView = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.Элемент.Имя].Документ.defaultView;

	Если ДополнительныеПараметры.Свойство("Позиция") Тогда
		Если ДополнительныеПараметры.Позиция.startLineNumber = ДополнительныеПараметры.Позиция.endLineNumber
			И ДополнительныеПараметры.Позиция.startColumn = ДополнительныеПараметры.Позиция.endColumn Тогда
			ДокументView.updateText(ТекстЗапроса);
		Иначе
			УстановитьТекстMonaco(ДокументView, ТекстЗапроса, УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(
			ДополнительныеПараметры.Позиция), Истина);
		КонецЕсли;
	Иначе
		УстановитьТекстMonaco(ДокументView, ТекстЗапроса, , Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьКонструкторЗапросаMonacoЗавершениеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОткрытьКонструкторЗапроса("", Новый ОписаниеОповещения("ПриЗавершенииРедактированияЗапросаMonaco", ЭтотОбъект,
		ДополнительныеПараметры));

КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтрокиMonacoЗавершениеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОткрытьКонструкторФорматнойСтроки("", Новый ОписаниеОповещения("ПриЗавершенииРедактированияФорматнойСтрокиMonaco",
		ЭтотОбъект, ДополнительныеПараметры));

КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, Дополнение)
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстКода);

	Если Не ЗначениеЗаполнено(ГраницыВыделения.НачалоСтроки) И Не ЗначениеЗаполнено(ГраницыВыделения.КонецСтроки) Тогда
		Возврат;
	КонецЕсли;

	Для НомерСтроки = ГраницыВыделения.НачалоСтроки По ГраницыВыделения.КонецСтроки Цикл
		СтрокаТекста = Текст.ПолучитьСтроку(НомерСтроки);
		Текст.ЗаменитьСтроку(НомерСтроки, Дополнение + СтрокаТекста);
	КонецЦикла;
	ТекстКода = Текст.ПолучитьТекст();
КонецПроцедуры

Процедура УдалитьТекстДополнениеВНачалеСтрокиПоГраницамВыделения(ТекстКода, ГраницыВыделения, Дополнение)
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстКода);

	Если Не ЗначениеЗаполнено(ГраницыВыделения.НачалоСтроки) И Не ЗначениеЗаполнено(ГраницыВыделения.КонецСтроки) Тогда
		Возврат;
	КонецЕсли;

	Для НомерСтроки = ГраницыВыделения.НачалоСтроки По ГраницыВыделения.КонецСтроки Цикл
		СтрокаТекста = Текст.ПолучитьСтроку(НомерСтроки);
		Если СтрНачинаетсяС(СтрокаТекста, Дополнение) Тогда
			СтрокаТекста = Сред(СтрокаТекста,СтрДлина(Дополнение)+1);
		КонецЕсли;
		
		Текст.ЗаменитьСтроку(НомерСтроки, СтрокаТекста);
	КонецЦикла;
	ТекстКода = Текст.ПолучитьТекст();
КонецПроцедуры

Функция НовыйСобытиеРедактораКодаДляОбработки()
	Событие = Новый Структура();
	Событие.Вставить("Элемент");
	Событие.Вставить("ИмяСобытия");
	Событие.Вставить("ДанныеСобытия");
	
	Возврат Событие;
КонецФункции

Функция ПодготовитьТекстЗапросаДляКонструктора(Текст)

	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");

	Возврат ТекстЗапроса;
КонецФункции

Функция НовыйГраницыВыделения()
	Границы = Новый Структура;
	Границы.Вставить("НачалоСтроки", 1);
	Границы.Вставить("НачалоКолонки", 1);
	Границы.Вставить("КонецСтроки", 1);
	Границы.Вставить("КонецКолонки", 1);
	
	Возврат Границы;
КонецФункции

#Область Monaco

Процедура ЗаполнитьСтруктуруКонтекстаРедактораКодаMonaco(ОбъектыДобавления, ДобавляемыйКонтекст, СоответствиеТипов)
	Для Каждого КлючЗначение Из ДобавляемыйКонтекст Цикл
		ОбъектДобавляемый = Новый Структура("ref,name");
		ОбъектДобавляемый.name = КлючЗначение.Ключ;
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
			ИмяТипа = КлючЗначение.Значение.Тип;

			Если КлючЗначение.Значение.Свойство("ПодчиненныеСвойства") 
				И КлючЗначение.Значение.ПодчиненныеСвойства.Количество()>0 Тогда

				ОбъектДобавляемый.Вставить("properties", Новый Структура);
				
				ЗаполнитьСтруктуруКонтекстаРедактораКодаMonaco(ОбъектДобавляемый.properties,
															   КлючЗначение.Значение.ПодчиненныеСвойства,
															   СоответствиеТипов);
//				Для Каждого Свойство Из КлючЗначение.Значение.ПодчиненныеСвойства Цикл
//					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОбъектДобавляемый.properties,
//																Свойство,
//																Истина,
//																СоответствиеТипов);
//				КонецЦикла;

			КонецЕсли;

		Иначе
			ИмяТипа = КлючЗначение.Значение;
		КонецЕсли;
		ОбъектДобавляемый.ref = ТипРедактораМонакоПоСтрокеТипа1С(ИмяТипа, СоответствиеТипов);
		ОбъектыДобавления.Вставить(КлючЗначение.Ключ, ОбъектДобавляемый);
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеМетаданныйДляИнициализацииРедактораMonaco()
	Описание = УИ_ПараметрыПриложения["ОписаниеМетаданныйДляИнициализацииРедактораMonaco"];
	Если Описание <> Неопределено Тогда
		Возврат Описание;
	КонецЕсли;

	ОписаниеКонфигурацииДляИнициализации = УИ_РедакторКодаВызовСервера.ОписнаиеМетаданныйДляИнициализацииРедактораMonaco();
	УИ_ПараметрыПриложения.Вставить("ОписаниеМетаданныйДляИнициализацииРедактораMonaco",
		ОписаниеКонфигурацииДляИнициализации);

	Возврат ОписаниеКонфигурацииДляИнициализации;

КонецФункции

Процедура УстановитьТекстMonaco(ДокументView, Текст, Позиция = Неопределено, УчитыватьОтступПервойСтроки = Истина)
	ДокументView.setText(Текст, Позиция);
КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтрокиMonaco(ПараметрыСобытия, ДополнительныеПараметры)
	Если ПараметрыСобытия = Неопределено Тогда
		УИ_ОбщегоНазначенияКлиент.ПоказатьВопросПользователю(
			Новый ОписаниеОповещения("ОткрытьКонструкторФорматнойСтрокиMonacoЗавершениеВопроса", ЭтотОбъект,
			ДополнительныеПараметры), "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?",
			РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСобытия.text, "|", ""), """", "");

		ПараметрыОповещения = ДополнительныеПараметры;

		Позиция = Новый Структура;
		Позиция.Вставить("startLineNumber", ПараметрыСобытия.startLineNumber);
		Позиция.Вставить("startColumn", ПараметрыСобытия.startColumn);
		Позиция.Вставить("endLineNumber", ПараметрыСобытия.endLineNumber);
		Позиция.Вставить("endColumn", ПараметрыСобытия.endColumn);

		ПараметрыОповещения.Вставить("Позиция", Позиция);

		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока,
			Новый ОписаниеОповещения("ПриЗавершенииРедактированияФорматнойСтрокиMonaco", ЭтотОбъект,
			ПараметрыОповещения));
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьКонструкторЗапросаMonaco(ПараметрыСобытия, ДополнительныеПараметры)
	Если ПараметрыСобытия = Неопределено Тогда
		УИ_ОбщегоНазначенияКлиент.ПоказатьВопросПользователю(
			Новый ОписаниеОповещения("ОткрытьКонструкторЗапросаMonacoЗавершениеВопроса", ЭтотОбъект,
			ДополнительныеПараметры), "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?",
			РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ПараметрыСобытия.isQueryMode Тогда
			ТекстЗапроса = ПараметрыСобытия.text;
		Иначе
			ТекстЗапроса = ПодготовитьТекстЗапросаДляКонструктора(ПараметрыСобытия.text);
		КонецЕсли;

		ПараметрыОповещения = ДополнительныеПараметры;

		Позиция = Новый Структура;
		Позиция.Вставить("startLineNumber", ПараметрыСобытия.startLineNumber);
		Позиция.Вставить("startColumn", ПараметрыСобытия.startColumn);
		Позиция.Вставить("endLineNumber", ПараметрыСобытия.endLineNumber);
		Позиция.Вставить("endColumn", ПараметрыСобытия.endColumn);

		ПараметрыОповещения.Вставить("Позиция", Позиция);
		ПараметрыОповещения.Вставить("isQueryMode", ПараметрыСобытия.isQueryMode);

		ОткрытьКонструкторЗапроса(ТекстЗапроса, Новый ОписаниеОповещения("ПриЗавершенииРедактированияЗапросаMonaco",
			ЭтотОбъект, ПараметрыОповещения));
	КонецЕсли;
КонецПроцедуры

Процедура ПолеРедактораHTMLПриНажатииMonaco(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Событие = ДанныеСобытия.Event.eventData1C;

	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;
//	СтандартнаяОбработка = Ложь;

		
	СобытиеДляОбработки = НовыйСобытиеРедактораКодаДляОбработки();
	СобытиеДляОбработки.Элемент = Элемент;
	СобытиеДляОбработки.ИмяСобытия = Событие.event;
	
	ДанныеСобытияДляОбработки = Неопределено;
	Если Событие.event = "EVENT_GET_METADATA" Тогда
		ДанныеСобытияДляОбработки = Событие.params;
	ИначеЕсли Событие.event = "EVENT_QUERY_CONSTRUCT" Тогда 
		ПараметрыЗапроса = Событие.params;
		ДокументHTMLView = ДанныеСобытия.Document.defaultView;
		
		Если ДокументHTMLView.isQueryMode() Тогда
			ГраницыВыделения = ГраницыВыделенияРедактораЭлементаФормы(Форма, Элемент);
			ДанныеСобытияДляОбработки = Новый Структура;
			ДанныеСобытияДляОбработки.Вставить("isQueryMode", Истина);
			ДанныеСобытияДляОбработки.Вставить("startLineNumber", ГраницыВыделения.НачалоСтроки);
			ДанныеСобытияДляОбработки.Вставить("startColumn", ГраницыВыделения.НачалоКолонки);
			ДанныеСобытияДляОбработки.Вставить("endLineNumber", ГраницыВыделения.КонецСтроки);
			ДанныеСобытияДляОбработки.Вставить("endColumn", ГраницыВыделения.КонецКолонки);
			ДанныеСобытияДляОбработки.Вставить("text", ДокументHTMLView.getText());
		Иначе
			Если ПараметрыЗапроса = Неопределено Тогда
				ПараметрыЗапроса = ДокументHTMLView.getQuery();
			КонецЕсли;

			Если ПараметрыЗапроса <> Неопределено И ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
				ДанныеСобытияДляОбработки = Новый Структура;
				ДанныеСобытияДляОбработки.Вставить("isQueryMode", Ложь);
				ДанныеСобытияДляОбработки.Вставить("startLineNumber", ПараметрыЗапроса.range.startLineNumber);
				ДанныеСобытияДляОбработки.Вставить("startColumn", ПараметрыЗапроса.range.startColumn);
				ДанныеСобытияДляОбработки.Вставить("endLineNumber", ПараметрыЗапроса.range.endLineNumber);
				ДанныеСобытияДляОбработки.Вставить("endColumn", ПараметрыЗапроса.range.endColumn);
				ДанныеСобытияДляОбработки.Вставить("text", ПараметрыЗапроса.text);
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли Событие.event = "EVENT_FORMAT_CONSTRUCT" Тогда 
		Если Событие.params <> Неопределено И ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
			ДанныеСобытияДляОбработки = Новый Структура;
			ДанныеСобытияДляОбработки.Вставить("startLineNumber", Событие.params.range.startLineNumber);
			ДанныеСобытияДляОбработки.Вставить("startColumn", Событие.params.range.startColumn);
			ДанныеСобытияДляОбработки.Вставить("endLineNumber", Событие.params.range.endLineNumber);
			ДанныеСобытияДляОбработки.Вставить("endColumn", Событие.params.range.endColumn);
			ДанныеСобытияДляОбработки.Вставить("text", Событие.params.text);
		КонецЕсли;
	КонецЕсли;	
	
	СобытиеДляОбработки.ДанныеСобытия = ДанныеСобытияДляОбработки;
	Форма.УИ_РедакторКодаКлиентскиеДанные.События.Добавить(СобытиеДляОбработки);

	Форма.ПодключитьОбработчикОжидания("Подключаемый_РедакторКодаОтложеннаяОбработкаСобытийРедактора", 0.1, Истина);
КонецПроцедуры

Функция ИмяКаталогаВидаМетаданных(ВидОбъектаМетаданных)
	Если ВидОбъектаМетаданных = "справочники" Тогда
		Возврат "Catalogs";
	ИначеЕсли ВидОбъектаМетаданных = "документы" Тогда
		Возврат "Documents";
	ИначеЕсли ВидОбъектаМетаданных = "константы" Тогда
		Возврат "Constants";
	ИначеЕсли ВидОбъектаМетаданных = "перечисления" Тогда
		Возврат "Enums";
	ИначеЕсли ВидОбъектаМетаданных = "отчеты" Тогда
		Возврат "Reports";
	ИначеЕсли ВидОбъектаМетаданных = "обработки" Тогда
		Возврат "DataProcessors";
	ИначеЕсли ВидОбъектаМетаданных = "планывидовхарактеристик" Тогда
		Возврат "ChartsOfCharacteristicTypes";
	ИначеЕсли ВидОбъектаМетаданных = "планысчетов" Тогда
		Возврат "ChartsOfAccounts";
	ИначеЕсли ВидОбъектаМетаданных = "планывидоврасчета" Тогда
		Возврат "ChartsOfCalculationTypes";
	ИначеЕсли ВидОбъектаМетаданных = "регистрысведений" Тогда
		Возврат "InformationRegisters";
	ИначеЕсли ВидОбъектаМетаданных = "регистрынакопления" Тогда
		Возврат "AccumulationRegisters";
	ИначеЕсли ВидОбъектаМетаданных = "регистрыбухгалтерии" Тогда
		Возврат "AccountingRegisters";
	ИначеЕсли ВидОбъектаМетаданных = "регистрырасчета" Тогда
		Возврат "CalculationRegisters";
	ИначеЕсли ВидОбъектаМетаданных = "бизнеспроцессы" Тогда
		Возврат "BusinessProcesses";
	ИначеЕсли ВидОбъектаМетаданных = "задачи" Тогда
		Возврат "Tasks";
	ИначеЕсли ВидОбъектаМетаданных = "планыобмена" Тогда
		Возврат "ExchangePlans";
	КонецЕсли;

КонецФункции

Процедура НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры)
	Если ДополнительныеПараметры.КаталогиИсходников.Количество() <= ДополнительныеПараметры.ИндексКаталогаИсходников Тогда
		Возврат;
	КонецЕсли;
	КаталогИсходныхФайлов = ДополнительныеПараметры.КаталогиИсходников[ДополнительныеПараметры.ИндексКаталогаИсходников].Каталог;

	Если Не ЗначениеЗаполнено(КаталогИсходныхФайлов) Тогда
		ДополнительныеПараметры.ИндексКаталогаИсходников = ДополнительныеПараметры.ИндексКаталогаИсходников + 1;
		НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	ИмяКаталогаПоискаФайла = КаталогИсходныхФайлов + ПолучитьРазделительПути() + ДополнительныеПараметры.КаталогМодуля
		+ ПолучитьРазделительПути() + ДополнительныеПараметры.ОписаниеОбъектаМетаданных.Имя;
	ДополнительныеПараметры.Вставить("ИмяКаталогаПоискаФайла", ИмяКаталогаПоискаФайла);

	НачатьПоискФайлов(Новый ОписаниеОповещения("УстановитьОписаниеМодуляДляРедактораMonacoЗавершениеПоискаФайловМодуля",
		ЭтотОбъект, ДополнительныеПараметры), ИмяКаталогаПоискаФайла, ДополнительныеПараметры.ИмяФайлаМодуля, Истина);

КонецПроцедуры

Процедура УстановитьОписаниеМодуляДляРедактораMonaco(ОбновляемыйОбъектМетаданных, ДополнительныеПараметры)
	МассивИменМетаданного = СтрРазделить(ОбновляемыйОбъектМетаданных, ".");

	Если МассивИменМетаданного.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;

	РедакторыФормы = ДополнительныеПараметры.Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(
		ДополнительныеПараметры.Форма, ДополнительныеПараметры.Элемент);
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	ДополнительныеПараметры.Вставить("КаталогиИсходников", ПараметрыРедактора.ПараметрыРедактора.КаталогиИсходныхФайлов);

	Если ДополнительныеПараметры.КаталогиИсходников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ИндексКаталогаИсходников", 0);

	ВидМодуля = МассивИменМетаданного[1];

	ДополнительныеПараметры.Вставить("ОбновляемыйОбъектМетаданных", ОбновляемыйОбъектМетаданных);
	ДополнительныеПараметры.Вставить("МассивИменМетаданного", МассивИменМетаданного);

	Если ВидМодуля = "manager" Тогда
		ОписаниеОбъектаМетаданных = УИ_РедакторКодаВызовСервера.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(
			МассивИменМетаданного[2], МассивИменМетаданного[3]);

		КаталогМодуля = ИмяКаталогаВидаМетаданных(МассивИменМетаданного[2]);
		ИмяФайла = "ManagerModule.bsl";

		ДополнительныеПараметры.Вставить("ЭтоОбщийМодуль", Ложь);

	ИначеЕсли ВидМодуля = "object" Тогда
		ОписаниеОбъектаМетаданных = УИ_РедакторКодаВызовСервера.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(
			МассивИменМетаданного[2], МассивИменМетаданного[3]);

		КаталогМодуля = ИмяКаталогаВидаМетаданных(МассивИменМетаданного[2]);
		ИмяФайла = "ObjectModule.bsl";

		ДополнительныеПараметры.Вставить("ЭтоОбщийМодуль", Ложь);
	Иначе
		ОписаниеОбъектаМетаданных = УИ_РедакторКодаВызовСервера.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(
			"ОбщиеМодули", МассивИменМетаданного[1]);

		КаталогМодуля = "CommonModules";
		ИмяФайла = "Module.bsl";

		ДополнительныеПараметры.Вставить("ЭтоОбщийМодуль", Истина);
	КонецЕсли;

	ДополнительныеПараметры.Вставить("ОписаниеОбъектаМетаданных", ОписаниеОбъектаМетаданных);
	ДополнительныеПараметры.Вставить("КаталогМодуля", КаталогМодуля);
	ДополнительныеПараметры.Вставить("ИмяФайлаМодуля", ИмяФайла);

	НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры);
КонецПроцедуры
Процедура УстановитьОписаниеМодуляДляРедактораMonacoЗавершениеПоискаФайловМодуля(НайденныеФайлы,
	ДополнительныеПараметры) Экспорт
	Если НайденныеФайлы = Неопределено Тогда
		ДополнительныеПараметры.ИндексКаталогаИсходников = ДополнительныеПараметры.ИндексКаталогаИсходников + 1;
		НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	Если НайденныеФайлы.Количество() = 0 Тогда
		ДополнительныеПараметры.ИндексКаталогаИсходников = ДополнительныеПараметры.ИндексКаталогаИсходников + 1;
		НачатьПоискФайлаМодуляВКаталогеИсходныхФайлов(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;

	ИмяФайла = НайденныеФайлы[0].ПолноеИмя;
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);

	ТекстовыйДокумент = Новый ТекстовыйДокумент;

	ДополнительныеПараметры.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ТекстовыйДокумент.НачатьЧтение(
		Новый ОписаниеОповещения("УстановитьОписаниеМодуляДляРедактораMonacoЗавершениеЧтенияФайла", ЭтотОбъект,
		ДополнительныеПараметры), ДополнительныеПараметры.ИмяФайла);

КонецПроцедуры

Процедура УстановитьОписаниеМодуляДляРедактораMonacoЗавершениеЧтенияФайла(ДополнительныеПараметры) Экспорт
	ТекстМодуля = ДополнительныеПараметры.ТекстовыйДОкумент.ПолучитьТекст();

	ДокументView = ДополнительныеПараметры.Элемент.Документ.defaultView;

	Если ДополнительныеПараметры.ЭтоОбщийМодуль Тогда
		ДокументView.parseCommonModule(ДополнительныеПараметры.ОписаниеОбъектаМетаданных.Имя, ТекстМодуля, Ложь);
	Иначе
		СоответствиеОбновляемыхОбъектовМетаданных = СоответствиеОбновляемыхОбъектовМетаданныхРедактораMonacoИПараметровСобытияОблновленияМетаданных();
		ОбновляемаяКоллекцияРедактора = СоответствиеОбновляемыхОбъектовМетаданных[ДополнительныеПараметры.ОписаниеОбъектаМетаданных.ВидОбъекта];
		ОбновляемаяКоллекцияРедактора = ОбновляемаяКоллекцияРедактора + "."
			+ ДополнительныеПараметры.ОписаниеОбъектаМетаданных.Имя + "."
			+ ДополнительныеПараметры.МассивИменМетаданного[1];

		ДокументView.parseMetadataModule(ТекстМодуля, ОбновляемаяКоллекцияРедактора);
	КонецЕсли;
	ДокументView.triggerSuggestions();

КонецПроцедуры

Процедура УстановитьОписаниеМетаданныхДляРедактораMonaco(ОбновляемыйОбъектМетаданных, ДополнительныеПараметры)

	МассивИменМетаданного = СтрРазделить(ОбновляемыйОбъектМетаданных, ".");

	ВидОбъекта = МассивИменМетаданного[0];

	СоответствиеОбновляемыхОбъектовМетаданных = СоответствиеОбновляемыхОбъектовМетаданныхРедактораMonacoИПараметровСобытияОблновленияМетаданных();
	ОбновляемаяКоллекцияРедактора = СоответствиеОбновляемыхОбъектовМетаданных[ВидОбъекта];

	Если МассивИменМетаданного.Количество() = 1 Тогда
		ОбновляемыеДанные = Новый Структура;

		МассивИмен = УИ_РедакторКодаВызовСервера.СписокМетаданныхПоВиду(ВидОбъекта);
		Для Каждого ТекИмя Из МассивИмен Цикл
			ОбновляемыеДанные.Вставить(ТекИмя, Новый Структура);
		КонецЦикла;
	Иначе
		ОписаниеОбъектаМетаданных = УИ_РедакторКодаВызовСервера.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(
			ВидОбъекта, МассивИменМетаданного[1]);
		Описание = ОписаниеОбъектаМетаданныхДляРедактораMonaco(ОписаниеОбъектаМетаданных);

		ОбновляемыеДанные = Описание;

		ОбновляемаяКоллекцияРедактора = ОбновляемаяКоллекцияРедактора + "." + ОписаниеОбъектаМетаданных.Имя;
	КонецЕсли;

	ДокументView = ДополнительныеПараметры.Элемент.Документ.defaultView;
	ДокументView.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(
			ОбновляемыеДанные), ОбновляемаяКоллекцияРедактора);

	ДокументView.triggerSuggestions();
КонецПроцедуры

Функция ВидОбъектаРедактораMonacoПоВидуОбъекта1С(ВидОбъекта)

КонецФункции

Функция ТипРедактораМонакоПоСтрокеТипа1С(Тип1СИлиСтрока, СоответствиеСсылочныхТипов)
	Если СоответствиеСсылочныхТипов = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Тип1С = Тип1СИлиСтрока;
	Если ТипЗнч(Тип1С) = Тип("Строка") Тогда
		Если СтрНайти(Тип1СИлиСтрока, ".") > 0 Тогда
			Возврат Тип1СИлиСтрока;
		КонецЕсли;
		
		Попытка
			Тип1С = Тип(Тип1С);
		Исключение
			Возврат "types." + Тип1СИлиСтрока;
		КонецПопытки;
	ИначеЕсли ТипЗнч(Тип1С) = Тип("ОписаниеТипов") Тогда 
		ТипыИзТипа = Тип1С.Типы();
		Если ТипыИзТипа.Количество() > 0 Тогда
			Тип1С = ТипыИзТипа[0];
		КонецЕсли;
	КонецЕсли;

	МетаданныеТипа=СоответствиеСсылочныхТипов[Тип1С];

	Если МетаданныеТипа = Неопределено Тогда
		Если ТипЗнч(Тип1СИлиСтрока) = Тип("Строка") Тогда
			Попытка
				Стр = Новый(Тип1СИлиСтрока);
				Возврат "classes." + Тип1СИлиСтрока;
			Исключение
				Возврат "types." + Тип1СИлиСтрока;
			КонецПопытки;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	Если МетаданныеТипа.ВидОбъекта = "Справочник" Тогда
		Возврат "catalogs." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "Документ" Тогда
		Возврат "documents." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "Задача" Тогда
		Возврат "tasks." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланВидовРасчета" Тогда
		Возврат "chartsOfCalculationTypes." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат "chartsOfCharacteristicTypes." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланОбмена" Тогда
		Возврат "exchangePlans." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланСчетов" Тогда
		Возврат "сhartsOfAccounts." + МетаданныеТипа.Имя;
	КонецЕсли;

	Возврат "";
КонецФункции

Функция ПолучитьСвязьСОбъектомМетаданныхДляРедактораMonaco(Реквизит, СоответствиеТипов)

	Связь = "";

	Типы = Реквизит.Тип.Типы();

	Индекс = 0;

	Для Каждого ТекТип Из Типы Цикл
		Связь = ТипРедактораМонакоПоСтрокеТипа1С(ТекТип, СоответствиеТипов);

		Если ЗначениеЗаполнено(Связь) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Связь;

КонецФункции

Процедура ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, Реквизит, ПолучатьСвязиРеквизита,
	СоответствиеТипов)

	Связь = "";
	Если ПолучатьСвязиРеквизита Тогда
		Связь= ПолучитьСвязьСОбъектомМетаданныхДляРедактораMonaco(Реквизит, СоответствиеТипов);
	КонецЕсли;

	ОписаниеРеквизита = Новый Структура("name", Реквизит.Имя);

	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;

	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);

КонецПроцедуры

Функция ОписаниеОбъектаМетаданныхДляРедактораMonaco(ОписаниеОбъектаМетаданных)
	СоответствиеТипов = СоответствиеСсылочныхТиповКонфигурации();
	ОписаниеРеквизитов = Новый Структура;
	ОписаниеРесурсов = Новый Структура;
	ОписаниеПредопределенных = Новый Структура;
	ОписаниеТабличныхЧастей = Новый Структура;
	ДополнительныеСвойства = Новый Структура;

	Если ОписаниеОбъектаМетаданных.ВидОбъекта = "Перечисление" Или ОписаниеОбъектаМетаданных.ВидОбъекта
		= "перечисления" Тогда

		Для Каждого КлючЗначениеЗначенияПеречисления Из ОписаниеОбъектаМетаданных.ЗначенияПеречисления Цикл
			ОписаниеРеквизитов.Вставить(КлючЗначениеЗначенияПеречисления.Ключ, Новый Структура("name",
				КлючЗначениеЗначенияПеречисления.Значение));
		КонецЦикла;

	Иначе

		Если ОписаниеОбъектаМетаданных.Свойство("Реквизиты") Тогда
			Для Каждого КлючЗначениеРеквизит Из ОписаниеОбъектаМетаданных.Реквизиты Цикл
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,
					СоответствиеТипов);
			КонецЦикла;
		КонецЕсли;
		Если ОписаниеОбъектаМетаданных.Свойство("СтандартныеРеквизиты") Тогда
			Для Каждого КлючЗначениеРеквизит Из ОписаниеОбъектаМетаданных.СтандартныеРеквизиты Цикл
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Ложь,
					СоответствиеТипов);
			КонецЦикла;
		КонецЕсли;
		Если ОписаниеОбъектаМетаданных.Свойство("Предопределенные") Тогда
				
				//Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
				//	
				//	Запрос = Новый Запрос(
				//	"ВЫБРАТЬ
				//	|	ПланСчетов.Код КАК Код,
				//	|	ПланСчетов.ИмяПредопределенныхДанных КАК Имя
				//	|ИЗ
				//	|	&Таблица КАК ПланСчетов
				//	|ГДЕ
				//	|	ПланСчетов.Предопределенный");				
				//						
				//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
				//	
				//	Выборка = Запрос.Выполнить().Выбрать();
				//	
				//	Пока Выборка.Следующий() Цикл 
				//		ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
				//	КонецЦикла;
				//	
				//Иначе				
			Для Каждого КлючЗначениеИмя Из ОписаниеОбъектаМетаданных.Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(КлючЗначениеИмя.Ключ, "");
			КонецЦикла;
				
				//КонецЕсли;

		КонецЕсли;

		Если ОписаниеОбъектаМетаданных.Свойство("Измерения") Тогда

			Для Каждого КлючЗначениеРеквизит Из ОписаниеОбъектаМетаданных.Измерения Цикл
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,
					СоответствиеТипов);
			КонецЦикла;
			Для Каждого КлючЗначениеРеквизит Из ОписаниеОбъектаМетаданных.Ресурсы Цикл
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,
					СоответствиеТипов);
			КонецЦикла;
				
				//ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);				

		КонецЕсли;

		Если ОписаниеОбъектаМетаданных.Свойство("ТабличныеЧасти") Тогда

			Для Каждого КлючЗначениеТабличнаяЧасть Из ОписаниеОбъектаМетаданных.ТабличныеЧасти Цикл

				ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
				ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: "
					+ ТабличнаяЧасть.Синоним));

				ОписаниеТабличнойЧасти = Новый Структура;

				Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
					Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
						ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
					КонецЦикла;
				КонецЕсли;

				Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
					Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
						ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
							Истина, СоответствиеТипов);
					КонецЦикла;
				КонецЕсли;

				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

			КонецЦикла;

		КонецЕсли;
		Если ОписаниеОбъектаМетаданных.Свойство("СтандартныеТабличныеЧасти") Тогда

			Для Каждого КлючЗначениеТабличнаяЧасть Из ОписаниеОбъектаМетаданных.СтандартныеТабличныеЧасти Цикл

				ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
				ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: "
					+ ТабличнаяЧасть.Синоним));

				ОписаниеТабличнойЧасти = Новый Структура;

				Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
					Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
						ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
					КонецЦикла;
				КонецЕсли;

				Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
					Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
						ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
							Истина, СоответствиеТипов);
					КонецЦикла;
				КонецЕсли;

				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);

	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;

	Если ОписаниеРесурсов.Количество() > 0 Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;

	Если ОписаниеПредопределенных.Количество() > 0 Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных);
	КонецЕсли;

	Если ОписаниеТабличныхЧастей.Количество() > 0 Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей);
	КонецЕсли;

	Возврат СтруктураОбъекта;
КонецФункции

Функция ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(Коллекция, СоответствиеТипов)

	ОписаниеКоллекции = Новый Структура;

	Для Каждого КлючЗначениеЭлементКоллекции Из Коллекция Цикл

		ОписаниеРеквизитов = Новый Структура;
		ОписаниеРесурсов = Новый Структура;
		ОписаниеПредопределенных = Новый Структура;
		ОписаниеТабличныхЧастей = Новый Структура;
		ДополнительныеСвойства = Новый Структура;

		ОбъектМетаданных = КлючЗначениеЭлементКоллекции.Значение;

		Если ОбъектМетаданных.ВидОбъекта = "Перечисление" Тогда

			Для Каждого КлючЗначениеЗначенияПеречисления Из ОбъектМетаданных.ЗначенияПеречисления Цикл
				ОписаниеРеквизитов.Вставить(КлючЗначениеЗначенияПеречисления.Ключ, Новый Структура("name",
					КлючЗначениеЗначенияПеречисления.Значение));
			КонецЦикла;

		Иначе

			Если ОбъектМетаданных.Свойство("Реквизиты") Тогда
				Для Каждого КлючЗначениеРеквизит Из ОбъектМетаданных.Реквизиты Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						Истина, СоответствиеТипов);
				КонецЦикла;
			КонецЕсли;
			Если ОбъектМетаданных.Свойство("СтандартныеРеквизиты") Тогда
				Для Каждого КлючЗначениеРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Ложь,
						СоответствиеТипов);
				КонецЦикла;
			КонецЕсли;
			Если ОбъектМетаданных.Свойство("Предопределенные") Тогда
				
				//Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
				//	
				//	Запрос = Новый Запрос(
				//	"ВЫБРАТЬ
				//	|	ПланСчетов.Код КАК Код,
				//	|	ПланСчетов.ИмяПредопределенныхДанных КАК Имя
				//	|ИЗ
				//	|	&Таблица КАК ПланСчетов
				//	|ГДЕ
				//	|	ПланСчетов.Предопределенный");				
				//						
				//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
				//	
				//	Выборка = Запрос.Выполнить().Выбрать();
				//	
				//	Пока Выборка.Следующий() Цикл 
				//		ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
				//	КонецЦикла;
				//	
				//Иначе				
				Для Каждого КлючЗначениеИмя Из ОбъектМетаданных.Предопределенные Цикл
					ОписаниеПредопределенных.Вставить(КлючЗначениеИмя.Ключ, Новый Структура("name, ref",
						КлючЗначениеИмя.Ключ, ""));
				КонецЦикла;
				
				//КонецЕсли;

			КонецЕсли;

			Если ОбъектМетаданных.Свойство("Измерения") Тогда

				Для Каждого КлючЗначениеРеквизит Из ОбъектМетаданных.Измерения Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						Истина, СоответствиеТипов);
				КонецЦикла;
				Для Каждого КлючЗначениеРеквизит Из ОбъектМетаданных.Ресурсы Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						Истина, СоответствиеТипов);
				КонецЦикла;
				
				//ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);				

			КонецЕсли;

			Если ОбъектМетаданных.Свойство("ТабличныеЧасти") Тогда

				Для Каждого КлючЗначениеТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл

					ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
					ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: "
						+ ТабличнаяЧасть.Синоним));

					ОписаниеТабличнойЧасти = Новый Структура;

					Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
						Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
							ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
						КонецЦикла;
					КонецЕсли;

					Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
						Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
							ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
								Истина, СоответствиеТипов);
						КонецЦикла;
					КонецЕсли;

					ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

				КонецЦикла;

			КонецЕсли;
			Если ОбъектМетаданных.Свойство("СтандартныеТабличныеЧасти") Тогда

				Для Каждого КлючЗначениеТабличнаяЧасть Из ОбъектМетаданных.СтандартныеТабличныеЧасти Цикл

					ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
					ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: "
						+ ТабличнаяЧасть.Синоним));

					ОписаниеТабличнойЧасти = Новый Структура;

					Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
						Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
							ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
						КонецЦикла;
					КонецЕсли;

					Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
						Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
							ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
								Истина, СоответствиеТипов);
						КонецЦикла;
					КонецЕсли;

					ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);

		Для Каждого Обход Из ДополнительныеСвойства Цикл
			СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
		КонецЦикла;

		Если 0 < ОписаниеРесурсов.Количество() Тогда
			СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
		КонецЕсли;

		Если 0 < ОписаниеПредопределенных.Количество() Тогда
			СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных);
		КонецЕсли;

		Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
			СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей);
		КонецЕсли;

		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, СтруктураОбъекта);

	КонецЦикла;

	Возврат ОписаниеКоллекции;

КонецФункции

Функция ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(Коллекция)

	ОписаниеКоллекции = Новый Структура;

	Для Каждого КлючЗначение Из Коллекция Цикл
		ОписаниеКоллекции.Вставить(КлючЗначение.Ключ, Новый Структура);
	КонецЦикла;

	Возврат ОписаниеКоллекции;

КонецФункции

Функция СоответствиеСсылочныхТиповКонфигурации()
	Соответствие = УИ_ПараметрыПриложения["СоответствиеСсылочныхТиповКонфигурации"];
	Если Соответствие <> Неопределено Тогда
		Возврат Соответствие;
	КонецЕсли;

	СоответствиеТипов = УИ_РедакторКодаВызовСервера.СоответствиеСсылочныхТипов();
	УИ_ПараметрыПриложения.Вставить("СоответствиеСсылочныхТиповКонфигурации", СоответствиеТипов);

	Возврат СоответствиеТипов;
КонецФункции

Функция ОписаниеМетаданныхКонфигурацииДляРедактораMonaco()
	ОписаниеМетаданных = УИ_ПараметрыПриложения["ОписаниеМетаданныхДляРедактораMonaco"];
	Если ОписаниеМетаданных <> Неопределено Тогда
		Возврат ОписаниеМетаданных;
	КонецЕсли;

	АдресОписанияМетаданных = УИ_ПараметрыПриложения["АдресОписанияМетаданныхКонфигурации"];
	Если Не ЭтоАдресВременногоХранилища(АдресОписанияМетаданных) Тогда
		АдресОписанияМетаданных = УИ_ОбщегоНазначенияВызовСервера.АдресОписанияМетаданныхКонфигурации();
		УИ_ПараметрыПриложения.Вставить("АдресОписанияМетаданныхКонфигурации", АдресОписанияМетаданных);
	КонецЕсли;
	МетаданныеКонфигурации = ПолучитьИзВременногоХранилища(АдресОписанияМетаданных);

	СоответствиеТипов = МетаданныеКонфигурации.СоответствиеСсылочныхТипов;

	КоллекцияМетаданных = Новый Структура;
	КоллекцияМетаданных.Вставить("catalogs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Справочники, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("documents", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Документы, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("infoRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.РегистрыСведений, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("accumRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.РегистрыНакопления, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("accountRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.РегистрыБухгалтерии, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("calcRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.РегистрыРасчета, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("dataProc", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Обработки, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("reports", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Отчеты, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("enums", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Перечисления, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("commonModules", ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
		МетаданныеКонфигурации.ОбщиеМодули));
	КоллекцияМетаданных.Вставить("сhartsOfAccounts", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.ПланыСчетов, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("businessProcesses", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.БизнесПроцессы, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("tasks", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Задачи, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("exchangePlans", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.ПланыОбмена, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("chartsOfCharacteristicTypes", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.ПланыВидовХарактеристик, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("chartsOfCalculationTypes", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.ПланыВидовРасчета, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("constants", ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
		МетаданныеКонфигурации.Константы));

	УИ_ПараметрыПриложения.Вставить("ОписаниеМетаданныхДляРедактораMonaco",
		УИ_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(КоллекцияМетаданных));
	УИ_ПараметрыПриложения.Вставить("СоответствиеСсылочныхТиповКонфигурации", СоответствиеТипов);

	Возврат КоллекцияМетаданных;
КонецФункции

Функция СоответствиеОбновляемыхОбъектовМетаданныхРедактораMonacoИПараметровСобытияОблновленияМетаданных()
	Соответствие = Новый Структура;
	Соответствие.Вставить("справочники", "catalogs.items");
	Соответствие.Вставить("catalogs", "catalogs.items");
	Соответствие.Вставить("документы", "documents.items");
	Соответствие.Вставить("documents", "documents.items");
	Соответствие.Вставить("регистрысведений", "infoRegs.items");
	Соответствие.Вставить("informationregisters", "infoRegs.items");
	Соответствие.Вставить("регистрынакопления", "accumRegs.items");
	Соответствие.Вставить("accumulationregisters", "accumRegs.items");
	Соответствие.Вставить("регистрыбухгалтерии", "accountRegs.items");
	Соответствие.Вставить("accountingregisters", "accountRegs.items");
	Соответствие.Вставить("регистрырасчета", "calcRegs.items");
	Соответствие.Вставить("calculationregisters", "calcRegs.items");
	Соответствие.Вставить("обработки", "dataProc.items");
	Соответствие.Вставить("dataprocessors", "dataProc.items");
	Соответствие.Вставить("отчеты", "reports.items");
	Соответствие.Вставить("reports", "reports.items");
	Соответствие.Вставить("перечисления", "enums.items");
	Соответствие.Вставить("enums", "enums.items");
	Соответствие.Вставить("планысчетов", "сhartsOfAccounts.items");
	Соответствие.Вставить("chartsofaccounts", "сhartsOfAccounts.items");
	Соответствие.Вставить("бизнеспроцессы", "businessProcesses.items");
	Соответствие.Вставить("businessprocesses", "businessProcesses.items");
	Соответствие.Вставить("задачи", "tasks.items");
	Соответствие.Вставить("tasks", "tasks.items");
	Соответствие.Вставить("планыобмена", "exchangePlans.items");
	Соответствие.Вставить("exchangeplans", "exchangePlans.items");
	Соответствие.Вставить("планывидовхарактеристик", "chartsOfCharacteristicTypes.items");
	Соответствие.Вставить("chartsofcharacteristictypes", "chartsOfCharacteristicTypes.items");
	Соответствие.Вставить("планывидоврасчета", "chartsOfCalculationTypes.items");
	Соответствие.Вставить("chartsofcalculationtypes", "chartsOfCalculationTypes.items");
	Соответствие.Вставить("константы", "constants.items");
	Соответствие.Вставить("constants", "chartsOfCalculationTypes.items");
	Соответствие.Вставить("module", "commonModules.items");

	Возврат Соответствие;
КонецФункции

#КонецОбласти
Процедура СохранитьБиблиотекуРедактораНаДиск(АдресБиблиотеки, ВидРедактора, ОписаниеОповещенияОЗавершении)
	КаталогСохраненияБибилиотеки=КаталогСохраненияРедактора(ВидРедактора);
	ФайлРедактора=Новый Файл(КаталогСохраненияБибилиотеки);

	ДопПараметры= Новый Структура;
	ДопПараметры.Вставить("АдресБиблиотеки", АдресБиблиотеки);
	ДопПараметры.Вставить("КаталогСохраненияБибилиотеки", КаталогСохраненияБибилиотеки);
	ДопПараметры.Вставить("ВидРедактора", ВидРедактора);
	ДопПараметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ФайлРедактора.НачатьПроверкуСуществования(
		Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораНаДискЗавершениеПроверкиСуществованияБиблиотекиНаДиске",
		ЭтотОбъект, ДопПараметры));
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры)
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;
	СоответствиеФайловБиблиотеки = ДополнительныеПараметры.СоответствиеФайловБиблиотеки;
	ЕстьНеСохраненное = Ложь;
	Для Каждого КлючЗначение Из СоответствиеФайловБиблиотеки Цикл
		Если МассивСохраненныхФайлов.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНеСохраненное = Истина;

		ИмяФайла=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + КлючЗначение.Ключ;
		ДополнительныеПараметры.Вставить("ТекКлючФайла", КлючЗначение.Ключ);

		Если ТипЗнч(КлючЗначение.Значение) = Тип("ТекстовыйДокумент") Тогда
			ОповещениеОЗаверешении = Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаТекстовогоДокументаЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			ОповещениеОЗаверешении = Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;

		КлючЗначение.Значение.НачатьЗапись(ОповещениеОЗаверешении, ИмяФайла);
		Прервать;
	КонецЦикла;

	Если Не ЕстьНеСохраненное Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли;
КонецПроцедуры

Функция КаталогСохраненияРедактора(ВидРедактора)
	СтруктураФайловыхПеременных=УИ_ОбщегоНазначенияКлиент.СтруктураФайловыхПеременныхСеанса();
	Если Не СтруктураФайловыхПеременных.Свойство("КаталогВременныхФайлов") Тогда
		Возврат "";
	КонецЕсли;

	Возврат СтруктураФайловыхПеременных.КаталогВременныхФайлов + "tools_ui_1c" + ПолучитьРазделительПути() + Формат(
		УИ_ОбщегоНазначенияКлиентСервер.Версия(), "ЧГ=0;") + ПолучитьРазделительПути() + ВидРедактора;
КонецФункции

Функция ИмяФайлаРедактораAceДляЯзыка(Язык = "bsl") Экспорт
	Возврат КаталогСохраненияРедактора(УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода().Ace)
		+ ПолучитьРазделительПути() + Язык + ".html";
КонецФункции

Функция ТекстHTMLРедактораКодаAce(КаталогСохраненияБибилиотеки, Язык)

	ТекстAce=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + "ace" + ПолучитьРазделительПути() + "ace.js";
	ТекстLT=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + "ace" + ПолучитьРазделительПути()
		+ "ext-language_tools.js";

	ТекЯзык=НРег(Язык);
	Если ТекЯзык = "bsl" Тогда
		ТекЯзык="_1c";
	КонецЕсли;
	ТекстHTML= "<!DOCTYPE html>
			   |<html lang=""ru"">
			   |<head>
			   |<title>ACE in Action</title>
			   |<style type=""text/css"" media=""screen"">
			   |    #editor { 
			   |        position: absolute;
			   |        top: 0;
			   |        right: 0;
			   |        bottom: 0;
			   |        left: 0;
			   |    }
			   |</style>
			   |</head>
			   |<body>
			   |
			   |<div id=""editor""></div>
			   |    
			   |<script src=""file://" + ТекстAce + """ type=""text/javascript"" charset=""utf-8""></script>
													|<script src=""file://" + ТекстLT + """ type=""text/javascript"" charset=""utf-8""></script>
																						|<script>
																						|    // trigger extension
																						|    ace.require(""ace/ext/language_tools"");
																						|    var editor = ace.edit(""editor"");
																						|    editor.session.setMode(""ace/mode/"
		+ ТекЯзык + """);
					|    editor.setTheme(""ace/theme/ones"");
					|    // enable autocompletion and snippets
					|    editor.setOptions({
					|        selectionStyle: 'line',
					|        highlightSelectedWord: true,
					|        showLineNumbers: true,
					|        enableBasicAutocompletion: true,
					|        enableSnippets: true,
					|        enableLiveAutocompletion: true
					|    });
					|
					|	editor.setHighlightSelectedWord(true);
					|
					|	function setSelection(startRow, startColumn, endRow, endColumn) {
					|		editor.clearSelection();
					|		var rangeEditor = new ace.Range(startRow, startColumn, endRow, endColumn);
					|       var selection = editor.getSelection();
					|       selection.setSelectionRange(rangeEditor, false);
					|		editor.centerSelection();
					|
					|	}
					|
					|</script>
					|
					|</body>
					|</html>";

	Возврат ТекстHTML;
КонецФункции

Процедура ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
	КаталогСохраненияБибилиотеки, Язык)
	Текст= Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстHTMLРедактораКодаAce(КаталогСохраненияБибилиотеки, Язык));

	СоответствиеФайловБиблиотеки.Вставить(Язык + ".html", Текст);

КонецПроцедуры
#КонецОбласти